<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd"><article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">19134199</article-id><article-id pub-id-type="pmc">2639376</article-id><article-id pub-id-type="publisher-id">1471-2105-10-14</article-id><article-id pub-id-type="doi">10.1186/1471-2105-10-14</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>MBA: a literature mining system for extracting biomedical abbreviations</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>Xu</surname><given-names>Yun</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>xuyun@ustc.edu.cn</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Wang</surname><given-names>ZhiHao</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>wangzhh@mail.ustc.edu.cn</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Lei</surname><given-names>YiMing</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>lyming@mail.ustc.edu.cn</email></contrib><contrib id="A4" contrib-type="author"><name><surname>Zhao</surname><given-names>YuZhong</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>zyzh@mail.ustc.edu.cn</email></contrib><contrib id="A5" corresp="yes" contrib-type="author"><name><surname>Xue</surname><given-names>Yu</given-names></name><xref ref-type="aff" rid="I3">3</xref><email>xueyu@ustc.edu.cn</email></contrib></contrib-group><aff id="I1"><label>1</label>Department of Computer Science and Technology, University of Science and Technology of China Hefei, Anhui 230027, PR China</aff><aff id="I2"><label>2</label>Anhui Province-MOST Co-Key Laboratory of High Performance Computing and Its Application Hefei, Anhui 230027, PR China</aff><aff id="I3"><label>3</label>School of Life Science, University of Science and Technology of China Hefei, Anhui 230027, PR China</aff><pub-date pub-type="collection"><year>2009</year></pub-date><pub-date pub-type="epub"><day>9</day><month>1</month><year>2009</year></pub-date><volume>10</volume><fpage>14</fpage><lpage>14</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/10/14"/><history><date date-type="received"><day>19</day><month>5</month><year>2008</year></date><date date-type="accepted"><day>9</day><month>1</month><year>2009</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2009 Xu et al; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2009</copyright-year><copyright-holder>Xu et al; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p><!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>               Xu               Yun                                             xuyun@ustc.edu.cn            </dc:author><dc:title>            MBA: a literature mining system for extracting biomedical abbreviations         </dc:title><dc:date>2009</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 10(1): 14-. (2009)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2009)10:1&#x0003c;14&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>--></license></permissions><abstract><sec><title>Background</title><p>The exploding growth of the biomedical literature presents many challenges for biological researchers. One such challenge is from the use of a great deal of abbreviations. Extracting abbreviations and their definitions accurately is very helpful to biologists and also facilitates biomedical text analysis. Existing approaches fall into four broad categories: rule based, machine learning based, text alignment based and statistically based. State of the art methods either focus exclusively on acronym-type abbreviations, or could not recognize rare abbreviations. We propose a systematic method to extract abbreviations effectively. At first a scoring method is used to classify the abbreviations into acronym-type and non-acronym-type abbreviations, and then their corresponding definitions are identified by two different methods: text alignment algorithm for the former, statistical method for the latter.</p></sec><sec><title>Results</title><p>A literature mining system MBA was constructed to extract both acronym-type and non-acronym-type abbreviations. An abbreviation-tagged literature corpus, called Medstract gold standard corpus, was used to evaluate the system. MBA achieved a recall of 88% at the precision of 91% on the Medstract gold-standard EVALUATION Corpus.</p></sec><sec><title>Conclusion</title><p>We present a new literature mining system MBA for extracting biomedical abbreviations. Our evaluation demonstrates that the MBA system performs better than the others. It can identify the definition of not only acronym-type abbreviations including a little irregular acronym-type abbreviations (e.g., &#x0003c;CNS1, cyclophilin seven suppressor&#x0003e;), but also non-acronym-type abbreviations (e.g., &#x0003c;Fas, CD95&#x0003e;).</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>The volume of published biomedical papers is expanding at an increasing rate each year. It is very challenging for biologists to keep up to date with their own field of biomedical research with biomedical knowledge expanding so quickly. Thus, an automatic method for biomedical knowledge text mining is urgently needed [<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>]. In biomedical text mining, one special issue is the exploding use of new abbreviations [<xref ref-type="bibr" rid="B3">3</xref>]. It would be a great help for literature retrieval to collect these abbreviations automatically. Furthermore, other text mining tasks could be done more efficiently if all the abbreviations for an entity could be mapped to a single term representing the concept [<xref ref-type="bibr" rid="B2">2</xref>]. Generally, an abbreviation is a short form of a word or phrase called "definition" or "long form". Our task is to identify &#x0003c;"short form", "long form"&#x0003e; pairs where there exists a mapping from characters in the short form to characters in the long form [<xref ref-type="bibr" rid="B4">4</xref>].</p><p>Existing approaches fall into four broad categories: rule based, machine learning based, text alignment based, and statistically based. Rule based approaches attempt to use the best recognition rule, and good rules would result in good results. Pustejovsky et al. [<xref ref-type="bibr" rid="B4">4</xref>] presented a regular expression algorithm based on hand-built regular expressions, and syntactic information was considered to identify boundaries of noun phrases. Ao and Takagi [<xref ref-type="bibr" rid="B5">5</xref>] constructed a system called ALICE based on heuristic pattern-matching rules. Larkey et al. [<xref ref-type="bibr" rid="B6">6</xref>], Yu et al. [<xref ref-type="bibr" rid="B7">7</xref>], Park and Byrd [<xref ref-type="bibr" rid="B8">8</xref>] all put forward their own pattern matching rules separately. The shortcoming for these rule based approaches is that the performance of them is determined by the completeness of the rules.</p><p>Machine learning based approaches generally comprise of a learner and a predictor, and fit in with all kinds of biomedical text by learning. Chang et al. [<xref ref-type="bibr" rid="B9">9</xref>] presented a method for identifying abbreviations using supervised machine learning. First step they used the Longest Common Subsequence (LCS) algorithm to find all possible alignments between the definition and the abbreviation; Second step, used all the possible alignments to compute feature vectors for correctly identified definitions; Third step, used binary logistic regression to train a classifier with the feature vectors. Generally speaking, machine learning based approaches depend on the learning model and the training data, and require a lot of labor and time. Text alignment based approaches always try to find the optimal alignment between the definition and abbreviation by character matching, and are robust enough to acronym-type abbreviations. Schwartz and Hearst [<xref ref-type="bibr" rid="B10">10</xref>] presented a simple algorithm for identifying the definitions of abbreviations with only two indices, lIndex for the long form, and sIndex for the short form. The two indices are initialized to point to the end of their respective strings. For each character sIndex points to, lIndex is decremented until a matching character is found. Taghva and Gilbreth [<xref ref-type="bibr" rid="B11">11</xref>] utilized the Longest Common Subsequence algorithm to find all possible alignments of the abbreviation to the text followed by a simple scoring rule based on matches. Chang et al. [<xref ref-type="bibr" rid="B9">9</xref>] also used the LCS algorithm in their machine learning method. However, state of the art alignment algorithms can not find non-acronym-type abbreviations (e.g., &#x0003c;Fas, CD95&#x0003e;), and even a little irregular acronym-type abbreviations (e.g., &#x0003c;CNS1, cyclophilin seven suppressor&#x0003e;).</p><p>Statistically based approaches always tend to extract abbreviations that appear frequently in biomedical text, and demand a large number of biomedical articles for the statistics. Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>] created an abbreviation database ADAM that analyzed statistical information about collocations of the type "long-form (abbreviation)" in MEDLINE. Okazaki and Ananiadou [<xref ref-type="bibr" rid="B13">13</xref>] built an abbreviation dictionary from the whole MEDLINE. Statistical methods can extract both acronym-type and non-acronym-type abbreviations as long as they appear frequently enough. However, they need a great deal of time and effort for the statistics, and would not find rare abbreviations even if they are only very simple acronym-type abbreviations like &#x0003c;DDR, DNA damage response&#x0003e;.</p><p>In this paper we present a systematic method for extracting biomedical abbreviations. What is crucial in this method is that a scoring strategy is utilized for classifying the abbreviations into acronym-type and non-acronym-type groups (Table <xref ref-type="table" rid="T1">1</xref> indicates what they mean). In the scoring strategy, the abbreviation is aligned with each of its candidate definitions using a new alignment algorithm analogous to pairwise sequence alignment [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>], and then the definition with the largest total score is selected from the candidate definitions. If the largest total score is larger than a predefined cutoff value the abbreviation is acronym-type, or else non-acronym-type. For the acronym-type abbreviation, we use the above alignment algorithm to identify the candidate definition with the largest total score as its definition. For the non-acronym-type abbreviation, we employ a statistical method similar to Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>] to determine the definition. Thus, a new literature mining System MBA for extracting biomedical abbreviations is developed to recognize more abbreviations and their corresponding definitions.</p><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Acronym-type abbreviations and non-acronym-type abbreviations</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left" colspan="2">abbreviations</td></tr></thead><tbody><tr><td align="left">acronym-type</td><td align="left">(1)regular acronym-type abbreviations: each character in the abbreviation is contained in the definition (e.g., &#x0003c;DC, dendritic cell&#x0003e;)</td></tr><tr><td></td><td align="left">(2)some irregular acronym-type ones: only one character in the abbreviation is not contained in the definition (e.g., &#x0003c;CNS1, cyclophilin seven suppressor&#x0003e;)</td></tr><tr><td colspan="2"><hr></hr></td></tr><tr><td align="left">non-acronym-type</td><td align="left">mainly several characters in the abbreviation are not contained in the definition (e.g., &#x0003c;Fas, CD95&#x0003e;, &#x0003c;5-HT, serotonin&#x0003e;, &#x0003c;Pax6, eyeless&#x0003e;)</td></tr></tbody></table></table-wrap></sec><sec><title>Results and discussion</title><p>Our method consists of four steps: step 1, abbreviation recognition; step 2, construct the candidate definition list; step 3, classify the abbreviations into acronym-type and non-acronym-type groups; step 4, identify the definitions of both acronym-type and non-acronym-type abbreviations. Figure <xref ref-type="fig" rid="F1">1</xref> shows the overall architecture of the MBA system.</p><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>The overall architecture of the MBA system</bold>.</p></caption><graphic xlink:href="1471-2105-10-14-1"/></fig><sec><title>Abbreviation recognition</title><p>To obtain the abbreviations, we take into consideration the feature of an abbreviation and the syntactic cues which abbreviations occur in the contexts. The feature of an abbreviation includes: its first character is alphabetic or numeric; it contains at least one letter; its length is between 2 and 10; it contains at most two words. Park and Byrd [<xref ref-type="bibr" rid="B8">8</xref>] demonstrated that the syntactic cues include:</p><p>(1) long form (short form) or long form [ short form]</p><p>(2) short form (long form) or short form [ long form]</p><p>(3) short form = long form</p><p>(4) long form = short form</p><p>(5) short form, <bold><italic>or </italic></bold>long form</p><p>(6) long form, <bold><italic>or </italic></bold>short form</p><p>(7) short form...<bold><italic>stands/short/acronym</italic></bold>...long form</p><p>(8) long form, short form <bold><italic>for short</italic></bold></p><p>In practice, most abbreviations appear with parentheses (e.g., protein kinase C (PKC)). We use the similar method for abbreviation recognition as most researchers, and only consider pattern (1) and (2). For pattern (2), the short form is the one or two words before the left parenthesis, and the long form is just the expression inside the parentheses. For pattern (1), the short form is inside the parentheses, but the long form is not easy to be identified. Thus, we take all the parenthesized tokens, in which the strings conform to the feature of an abbreviation, to be potential abbreviations. Next we find all the possible candidate definitions for each potential abbreviation, and then identify the optimal definition.</p></sec><sec><title>Construct the candidate definition list</title><p>The candidate definition appears in the same sentence as the abbreviation, and it can be searched for within a search space. The size of the search space is the sum of the maximum length of a definition (the number of the words in the definition) and the maximum offset (the longest distance of a definition from an abbreviation). In our work, the offset is ignored and we consider only definitions adjacent to the abbreviations (as most researchers do). Park and Byrd [<xref ref-type="bibr" rid="B8">8</xref>] analyzed about 4500 abbreviations and their definitions, and then they decided that, for relatively short abbreviations (from two to four characters), the maximum length of a definition should not be greater than twice the abbreviation length (the number of the characters in an abbreviation); for long abbreviations (five or more characters), the definition should not be longer than the abbreviation length plus 5. Thus, we refer to their work for the maximum length of a definition <italic>DEF </italic>of an abbreviation <italic>ABBR</italic>:</p><p><disp-formula id="bmcM1"><label>(1)</label><italic>Max</italic>.|<italic>DEF</italic>| = <italic>min </italic>(|<italic>ABBR</italic>| + 5, |<italic>ABBR</italic>| * 2)</disp-formula></p><p>where <italic>Max</italic>.|<italic>DEF</italic>| is the maximum length of a definition, and <italic>|ABBR| </italic>is the number of the characters in an abbreviation.</p><p>Then a candidate definition list is constructed from the search space, and the possible definition is just one item of it. The list-constructing algorithm is described in Table <xref ref-type="table" rid="T2">2</xref>. For example, in the text "this gene is expressed in a circadian pattern in the suprachiasmatic nucleus (SCN)", |<italic>ABBR</italic>| = 3, <italic>Max</italic>.|<italic>DEF</italic>| = min(3+5,3*2) = 6, <italic>SearchSpaceString </italic>= "circadian pattern in the suprachiasmatic nucleus", <italic>CDL </italic>= {"circadian pattern in the suprachiasmatic nucleus", "pattern in the suprachiasmatic nucleus", "in the suprachiasmatic nucleus", "the suprachiasmatic nucleus", "suprachiasmatic nucleus", "nucleus"}.</p><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>Construct the Candidate Definition List CDL&#x0003e;</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left">1: Initiate an empty candidate definition list CDL;</td></tr><tr><td align="left">2: Num = the number of words from the beginning of the sentence which contains the abbreviation to the left parenthesis;</td></tr><tr><td align="left">3: if (Num &#x0003c; Max.|DEF|) {<break/>SearchSpaceString = the string from the beginning of the sentence to the left parenthesis;<break/>}<break/>else {<break/>SearchSpaceString = the string that contains Max.|DEF| words before the left parenthesis;<break/>}</td></tr><tr><td align="left">4: WordNum = min (Num, Max.|DEF|);</td></tr><tr><td align="left">5: for (N = 0; N &#x0003c; WordNum; N++) {<break/>CandidateDef = SearchSpaceString with the leftmost N words deleted;<break/>insert CandidateDef into CDL;<break/>}</td></tr></tbody></table></table-wrap></sec><sec><title>Classify the type of abbreviations</title><p>Abbreviations are classified into acronym-type and non-acronym-type abbreviations (Table <xref ref-type="table" rid="T1">1</xref> indicates what they mean) by scoring abbreviations and their corresponding definitions. Each time we retrieve an item from the candidate definition list, align it with the abbreviation employing our alignment algorithm, and then select the optimal definition. The score between the abbreviation and the optimal definition determines whether the abbreviation is acronym-type or not.</p><sec><title>Data preprocessing</title><p>Usually a definition is abbreviated with a new addition of a special character (e.g., &#x0003c;Myo3/5p, Myo3p and Myo5p&#x0003e;), and the lowercase letter from a definition may be changed into its corresponding capital letter. Some data preprocessing steps must be taken before we identify the definition for a given abbreviation:</p><p>&#x02022; delete the character that is neither alphabetic nor numeric in the abbreviation and change all capital letters in both the abbreviation and the definition into their corresponding lowercase letters.</p><p>&#x02022; replace the space between words of the candidate definition with the character '\s' in order to differentiate between the space inserted in the alignment algorithm and the space between words of the candidate definition.</p></sec><sec><title>Alignment algorithm</title><p>The definition identification is a process of comparison between the abbreviation and the definition. The smallest unit of comparison is a pair of characters, one from the abbreviation, and the other from the definition. All possible comparisons are made from the smallest unit while allowing gap insertions in the abbreviation. Among the comparisons the definition with the best match is chosen as the optimal definition. The best match can be defined as the largest alignment score of characters of the definition that can be matched with those of the abbreviation. The largest alignment score can be determined by representing in a two-dimensional array, all possible pair combinations that can be constructed from the abbreviation and the definition, <italic>A </italic>and <italic>D</italic>, being compared. <italic>A [i] </italic>is the ith character of the abbreviation string and <italic>D [j] </italic>is the jth character of the definition string. <italic>A [i] </italic>and <italic>D [j] </italic>represent the rows and the columns of the two-dimensional array <italic>SCORE</italic>. Then the cell, <italic>SCORE [i] [j]</italic>, represents a pair combination that contains <italic>A [i] </italic>and <italic>D [j]</italic>.</p><p>With the above definition of <italic>A [i]</italic>, <italic>D [j] </italic>and <italic>SCORE [i] [j]</italic>, now what we need to do is to get the largest value of <italic>SCORE [i] [j]</italic>, which represents the best match. Then dynamic programming is used to compute each cell value of <italic>SCORE</italic>. Unlike the solutions of Needleman and Wunsch [<xref ref-type="bibr" rid="B14">14</xref>] and Smith and Waterman [<xref ref-type="bibr" rid="B15">15</xref>], we do not allow the gap insertions in the definition, so <italic>SCORE [i] [j] </italic>is determined by <italic>SCORE [i] [j-1]</italic>, <italic>SCORE [i-1] [j-1] </italic>and the alignment of <italic>A [i] </italic>and <italic>D [j]</italic>, and not by <italic>SCORE [i-1] [j]</italic>. The below is the recursion equation for computing the largest value of <italic>SCORE [i] [j]</italic>.</p><p>Firstly the initial value is assigned:</p><p><disp-formula><italic>SCORE [i] [j] </italic>= 0 if <italic>i </italic>= 0 or <italic>j </italic>= 0;</disp-formula></p><p>Then, we have</p><p><disp-formula id="bmcM2"><label>(2)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M1" name="1471-2105-10-14-i1" overflow="scroll"><mml:semantics><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>S</mml:mi><mml:mi>C</mml:mi><mml:mi>O</mml:mi><mml:mi>R</mml:mi><mml:mi>E</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mrow><mml:mi>max</mml:mi><mml:mo>&#x02061;</mml:mo></mml:mrow><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mn>0</mml:mn><mml:mo>&#x0003c;</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x0003c;</mml:mo><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mn>0</mml:mn><mml:mo>&#x0003c;</mml:mo><mml:mi>j</mml:mi><mml:mo>&#x02264;</mml:mo><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:msub><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>S</mml:mi><mml:mi>C</mml:mi><mml:mi>O</mml:mi><mml:mi>R</mml:mi><mml:mi>E</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo><mml:mo>+</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>S</mml:mi><mml:mi>C</mml:mi><mml:mi>O</mml:mi><mml:mi>R</mml:mi><mml:mi>E</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>where the <italic>w(A [i], D [j]) </italic>is defined as:</p><p><disp-formula id="bmcM3"><label>(3)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M2" name="1471-2105-10-14-i2" overflow="scroll"><mml:semantics><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>W</mml:mi><mml:mi>A</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>A</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mtext>&#x000a0;</mml:mtext><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mtext>&#x000a0;</mml:mtext><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>w</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mo>;</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>W</mml:mi><mml:mi>B</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>A</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mtext>&#x000a0;</mml:mtext><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mtext>&#x000a0;</mml:mtext><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>n</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>w</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>t</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mo>;</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>W</mml:mi><mml:mi>C</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mtext>&#x000a0;</mml:mtext><mml:mi>A</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>!</mml:mo><mml:mo>=</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>where <italic>WA </italic>and <italic>WB </italic>are positive values, <italic>WA</italic>&#x0003e;<italic>WB</italic>, and <italic>WC </italic>is a negative value.</p><p>After the matrix <italic>SCORE </italic>is filled, <italic>SCORE [length(A)] [length(D)] </italic>is just the largest alignment score, the score of the best match. Knowing the largest alignment score is not enough, we need to get the best match pathway by traceback. The best match pathway can be obtained by beginning at the terminals of both strings (<italic>i </italic>= length(<italic>A</italic>), <italic>j </italic>= length(<italic>D</italic>)) and proceeding row by row toward the origins. The traceback algorithm checks if <italic>SCORE [i] [j] </italic>is obtained from <italic>SCORE [i-1] [j-1]</italic>. If yes, <italic>A [i] </italic>is identical to <italic>D [j]</italic>, and both <italic>i </italic>and <italic>j </italic>are decremented. If not, a space is inserted before the ith character of the abbreviation, and only <italic>j </italic>is decremented. The process is repeated until all cells in the matrix SCORE have been operated upon. The operation of successive summations of cell values is illustrated in Figure <xref ref-type="fig" rid="F2">2</xref> (we assume here that <italic>WA </italic>= 2, <italic>WB </italic>= 1 and <italic>WC </italic>= -10).</p><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>An example for the alignment algorithm</bold>. The definition is "Dialog Acts", and the abbreviation is "DAs". All the arrows form the best match pathway.</p></caption><graphic xlink:href="1471-2105-10-14-2"/></fig></sec><sec><title>Select the optimal definition</title><p>From the candidate definition list <italic>CDL</italic>, we can get at most <italic>Max</italic>.|<italic>DEF</italic>| candidate definitions, each of which corresponds to an alignment score provided by the alignment algorithm. Despite the alignment score, it is not enough to determine the optimal definition. For example,</p><p>1. In the text "little is known, however, about how such dialog acts (DAs) can be automatically classified in truly natural conversation", "DAs" will be recognized as an abbreviation. The true definition is "dialog acts", but "dialog acts", "such dialog acts", "how such dialog acts" and "about how such dialog acts" will have the same alignment score.</p><p>2. In the text "the mutations map across most of the Bicoid protein, with some located within the DNA-binding domain (homeodomain)", "homeodomain" will be recognized as an abbreviation wrongly. Then the alignment algorithm will select the string "with some located within the DNA-binding domain" as its definition. However, "within the DNA-binding" in the definition is unmatched in this alignment (Figure <xref ref-type="fig" rid="F3">3</xref> illustrates what "unmatch" means). With too many unmatched words in the middle of the definition this abbreviation must be thrown away.</p><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>An example for the redundant word penalty</bold>. This is an alignment for &#x0003c;DER, Drosophila epidermal growth factor receptor&#x0003e;. In the alignment, the word "growth" in the definition is unmatched, and "factor" is also unmatched. Adjacent to each other, they are called "continuous unmatched words". The number of the continuous unmatched words is 2.</p></caption><graphic xlink:href="1471-2105-10-14-3"/></fig><p>3. In the text "a questionnaire was sent to them as well as to 246 physicians who had residency-level teaching responsibilities but who were not named (controls)", "controls" will be recognized as an abbreviation wrongly. The alignment algorithm will select the string "physicians who had residency-level teaching responsibilities but who were not named" as its definition. However, "but who were not named" in the definition is unmatched in this alignment. With too many unmatched words in the end of the definition this abbreviation must also be thrown away.</p><p>Then we put forward a new concept: the redundant word penalty, which is defined as follows:</p><p><bold>Definition 1 </bold><italic>The redundant word penalty is a penalty against the candidate definitions having several continuous unmatched words</italic>.</p><p>The penalty depends on the number of the continuous unmatched words in the candidate definition (Figure <xref ref-type="fig" rid="F3">3</xref>). If the number is small, the penalty is low, otherwise the penalty is high. One unmatch word often appears in true definitions, for example, for the pair &#x0003c;FMDV, foot and mouth disease virus&#x0003e;, there is only one unmatched word "and" in the definition. The penalty should be very low in this case. Based on the analysis, the redundant word penalty (RWP) is divided into the beginning word penalty (<italic>BP</italic>, a low penalty) and the extended word penalty (<italic>EP</italic>, a high penalty). In <italic>N </italic>continuous unmatched words, the first <italic>C </italic>words are given a penalty score, <italic>BP </italic>for each word, and the other <italic>N-C </italic>words are given another penalty score, <italic>EP </italic>for each word. Thus, the equation of <italic>RWP </italic>is as follows:</p><p><disp-formula id="bmcM4"><label>(4)</label><italic>RWP </italic>= <italic>C * BP </italic>+ <italic>EP * </italic>(<italic>N </italic>- <italic>C</italic>)</disp-formula></p><p>There are three cases (corresponding to the above three examples respectively) that the redundant word penalty occurs:</p><p>1. The first character of the abbreviation does not match the first word of the candidate definition (<italic>RWP1</italic>).</p><p>2. Two adjacent characters in the abbreviation match two separated words in the candidate definition separately (<italic>RWP2</italic>).</p><p>3. The last character of the abbreviation does not match the last word of the candidate definition (<italic>RWP3</italic>).</p><p>For example, for the alignment &#x0003c;DER, Drosophila epidermal growth factor receptor&#x0003e; in Figure <xref ref-type="fig" rid="F3">3</xref>, <italic>RWP1</italic>, <italic>RWP2 </italic>and <italic>RWP3 </italic>are computed as follows:</p><p>1. <italic>RWP1 </italic>= 0, because the first character "D" in the abbreviation matches the first word "Drosophila" of the definition.</p><p>2. For <italic>RWP2</italic>, any two adjacent characters in the abbreviation must be considered. "D" and "E" match two adjacent words "Drosophila" and "epidermal" respectively, so <italic>RWP2("DE") </italic>= 0; "E" and "R" match two separated words "epidermal" and "receptor" respectively, and the number of the continuous unmatched words is 2, so <italic>RWP2("ER") </italic>= <italic>C </italic>*<italic>BP </italic>+ <italic>EP</italic>*(2-<italic>C</italic>). In sum, <italic>RWP2 </italic>= <italic>RWP2("DE") </italic>+ <italic>RWP2("ER")</italic>.</p><p>3. <italic>RWP3 </italic>= 0, because the last character "R" in the abbreviation matches the last word "receptor" in the definition.</p><p>The three cases may appear in the same alignment, so the total redundant word penalty (<italic>TotalRWP</italic>) is:</p><p><disp-formula id="bmcM5"><label>(5)</label><italic>TotalRWP </italic>= <italic>RWP1 </italic>+ <italic>RWP2 </italic>+ <italic>RWP3</italic></disp-formula></p><p>Then for each alignment, we have</p><p><disp-formula id="bmcM6"><label>(6)</label><italic>total score </italic>= <italic>alignment score - TotalRWP</italic></disp-formula></p><p>At last the optimal definition can be selected from the candidate definition list by selecting the largest <italic>total score</italic>. If the <italic>total score </italic>of the optimal definition is larger than the predefined cutoff score, the abbreviation is acronym-type, otherwise non-acronym-type.</p><p>Here, the <italic>w(A [i], D [j])</italic>, the redundant word penalty, the cutoff score and the variable <italic>C </italic>(in equation 4) need to be adjusted. To assist in assigning the optimal value for the above, a publicly available tagged corpus, the Medstract gold standard DEVELOPMENT corpus is used. We first gave each of the above parameters an initial value, and then for each one we examined how the total score for the optimal definition were distributed when we changed the value keeping the other parameters unchanged. To truly differentiate acronym-type and non-acronym-type abbreviations, the values are set as follows:</p><p>&#x02022; <italic>WA </italic>2</p><p>&#x02022; <italic>WB </italic>1</p><p>&#x02022; <italic>WC </italic>-7</p><p>&#x02022; <italic>BP </italic>0.5</p><p>&#x02022; <italic>EP </italic>4.5</p><p>&#x02022; <italic>C </italic>1.0</p><p>&#x02022; the cutoff score 0.5</p></sec></sec><sec><title>Identify the definitions of both acronym-type and non-acronym-type abbreviations</title><p>We could separately identify the definitions of acronym-type and non-acronym-type abbreviations after the abbreviations are classified. For the acronym-type abbreviation, we use the above alignment algorithm to traceback for the definition with the largest total score, and thus the definition is identified. For the non-acronym-type abbreviation, we use a statistical method similar to that of Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>].</p><p>Our statistical method is based on PubMed (a service of the U.S. National Library of Medicine that includes over 17 million citations from MEDLINE and other life science journals for biomedical articles back to the 1950s), in which we count the number of articles that contain both the candidate definition and the abbreviation. Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>] got statistical information of "candidate definition (abbreviation)" including a pair of parentheses, whereas the abbreviation and the definition may not be separated by parentheses or not appear in the same sentence but the same article. It is too complex to consider all the syntactic clues which abbreviations occur in the contexts in abbreviation recognition, but the statistical method need not consider the specific syntactic clues and only care about whether the definition and the abbreviation co-occur in the same article. We assume that the abbreviation is "abbr", and the candidate definition with i words is: "w<sub><italic>i</italic></sub>...w<sub>2</sub>w<sub>1</sub>". Thus, we count the number of articles in PubMed for each step in the progression "abbr" &#x02192; "w<sub>1 </sub>AND abbr" &#x02192; "w<sub>2</sub>w<sub>1 </sub>AND abbr" &#x02192;...&#x02192; "w<sub><italic>i</italic></sub>...w<sub>2</sub>w<sub>1 </sub>AND abbr", and then assign each candidate definition/abbreviation pair a score that will be used to identify the candidate definition for a given abbreviation. The same score apr<sub><italic>i</italic></sub>, the adjusted proportion of the raw proportion pr<sub><italic>i</italic></sub>, is used for identifying the candidate definition as Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>]:</p><p><disp-formula id="bmcM7"><label>(7)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M3" name="1471-2105-10-14-i3" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mo>"</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mn>...</mml:mn><mml:msub><mml:mi>w</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:msub><mml:mi>w</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>"</mml:mo><mml:mi>A</mml:mi><mml:mi>N</mml:mi><mml:mi>D</mml:mi><mml:mo>"</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>b</mml:mi><mml:mi>r</mml:mi><mml:mo>"</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mo>"</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mn>...</mml:mn><mml:msub><mml:mi>w</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:msub><mml:mi>w</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>"</mml:mo><mml:mi>A</mml:mi><mml:mi>N</mml:mi><mml:mi>D</mml:mi><mml:mo>"</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>b</mml:mi><mml:mi>r</mml:mi><mml:mo>"</mml:mo><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02265;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:semantics></mml:math></disp-formula></p><p><disp-formula id="bmcM8"><label>(8)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M4" name="1471-2105-10-14-i4" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mn>2</mml:mn><mml:mo>&#x02217;</mml:mo><mml:msqrt><mml:mrow><mml:mfrac><mml:mrow><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&#x02217;</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>&#x02212;</mml:mo><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mo>"</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mn>...</mml:mn><mml:msub><mml:mi>w</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:msub><mml:mi>w</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>"</mml:mo><mml:mi>A</mml:mi><mml:mi>N</mml:mi><mml:mi>D</mml:mi><mml:mo>"</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>b</mml:mi><mml:mi>r</mml:mi><mml:mo>"</mml:mo><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:msqrt><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02265;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>where count ["<italic>w</italic><sub><italic>i</italic></sub><italic>w</italic><sub><italic>i</italic>-1</sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1</sub>" AND "abbr"] is the number of articles in which both the w<sub><italic>i</italic></sub>w<sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1 </sub>and the abbreviation occur. In equation 8 it requires that <italic>pr</italic><sub><italic>i </italic></sub>&#x02265; 0, so count ["w<sub><italic>i</italic></sub>w<sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1 </sub>"AND "abbr"] must be larger than zero in equation 7. If count ["w<sub><italic>i</italic></sub><italic>w</italic><sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1</sub>" AND "abbr"] is equal to zero, we assign it the value 1. For example, in the text "a lupus-like murine model of CD95 (Fas)", the adjusted proportion apr<sub><italic>i </italic></sub>is computed as:</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M5" name="1471-2105-10-14-i5" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>8181</mml:mn><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>17318</mml:mn></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mn>0.4723</mml:mn></mml:mrow></mml:semantics></mml:math></disp-formula></p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M6" name="1471-2105-10-14-i6" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mn>0.4723</mml:mn><mml:mo>&#x02212;</mml:mo><mml:mn>2</mml:mn><mml:mo>&#x02217;</mml:mo><mml:msqrt><mml:mrow><mml:mfrac><mml:mrow><mml:mn>0.4723</mml:mn><mml:mo>&#x02217;</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>&#x02212;</mml:mo><mml:mn>0.4723</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mn>17318</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msqrt><mml:mo>=</mml:mo><mml:mn>0.4647</mml:mn></mml:mrow></mml:semantics></mml:math></disp-formula></p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M7" name="1471-2105-10-14-i7" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>8181</mml:mn></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:semantics></mml:math></disp-formula></p><p><italic>apr</italic><sub>2 </sub>= 0</p><p>The apr value drops significantly from "CD95 (Fas)" to "of CD95 (Fas)", and thus "CD95" is determined as the definition of "Fas". In order to determine the cutoff score for the adjusted proportion, we extracted all the abbreviations and their candidate definitions in the Medstract Gold Standard DEVELOPMENT Corpus which contains 126 &#x0003c;"short form", "long form"&#x0003e; pairs, and then computed the apr value for all the candidate definitions. At last we found that 0.05 was still fit for the cutoff score as in Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>], which means that if the apr value drops below 0.05 when the candidate definition w<sub><italic>i</italic></sub>w<sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1 </sub>is expanded to w<sub><italic>i</italic>+1</sub>w<sub><italic>i</italic></sub>w<sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1</sub>, w<sub><italic>i</italic></sub>w<sub><italic>i</italic>-1</sub>...w<sub>2</sub>w<sub>1 </sub>is identified as the definition of the abbreviation. Here, we also do not apply the cut off criteria to apr<sub>1 </sub>and instead require that count ["w<sub>1</sub>" AND" abbr"] &#x02265; 10. In summary, given the abbreviation "abbr" and the candidate definition "<italic>w</italic><sub><italic>k</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1</sub>", <italic>w</italic><sub>1 </sub>is a candidate definition identified by</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M8" name="1471-2105-10-14-i8" overflow="scroll"><mml:semantics><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mo>"</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>"</mml:mo><mml:mi>A</mml:mi><mml:mi>N</mml:mi><mml:mi>D</mml:mi><mml:mo>"</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>b</mml:mi><mml:mi>r</mml:mi><mml:mo>"</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>&#x02265;</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>&#x0003c;</mml:mo><mml:mn>0.05</mml:mn></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:semantics></mml:math></disp-formula></p><p><italic>w</italic><sub><italic>k</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1 </sub>is a candidate definition identified by</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M9" name="1471-2105-10-14-i9" overflow="scroll"><mml:semantics><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mo>"</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>"</mml:mo><mml:mi>A</mml:mi><mml:mi>N</mml:mi><mml:mi>D</mml:mi><mml:mo>"</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mi>b</mml:mi><mml:mi>r</mml:mi><mml:mo>"</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>&#x02265;</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:munder><mml:mo>&#x02265;</mml:mo><mml:mrow><mml:mn>2</mml:mn><mml:mo>&#x02264;</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02264;</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:munder><mml:mn>0.05</mml:mn></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>&#x0003c;</mml:mo><mml:mn>0.05</mml:mn></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>In the above method, several candidate definitions may exist for a given abbreviation. The change of apr is also used to get rid of redundant candidate definitions as in the method of Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>]: given two candidate definitions of the same abbreviation, <italic>w</italic><sub><italic>m</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1 </sub>and <italic>w</italic><sub><italic>n</italic></sub>...<italic>w</italic><sub><italic>m</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1</sub>(<italic>m</italic>&#x0003c;<italic>n</italic>), then</p><p><disp-formula id="bmcM9"><label>(9)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M10" name="1471-2105-10-14-i10" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>&#x00394;</mml:mi><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:mi>r</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>if &#x00394;apr &#x02265; 0.18, remove <italic>w</italic><sub><italic>n</italic></sub>...<italic>w</italic><sub><italic>m</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1</sub>, otherwise remove <italic>w</italic><sub><italic>m</italic></sub>...<italic>w</italic><sub>2</sub><italic>w</italic><sub>1</sub>. If the first word of the candidate definition is in the PubMed stopword list <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/entrez/query/static/help/pmhelp.html#Stopwords"/>, the first word is removed from the candidate definition. Finally a filtering rule is adopted: the length ratio (the number of alphanumeric characters of the definition vs the abbreviation) should be larger than 1. In the paper of Zhou et al. [<xref ref-type="bibr" rid="B12">12</xref>], the length ratio must be either equal to or larger than 2.5 because 95% of the single-word abbreviations in the Stanford Abbreviation Database have length ratio &#x02265; 2.5, but our statistical method is only for non-acronym-type abbreviations. There are many non-acronym-type abbreviations such as &#x0003c;Fas, CD95&#x0003e;, &#x0003c;Pax6, eyeless&#x0003e; and so on, and their length ration is neither equal to nor larger than 2.5, but generally larger than 1.</p></sec><sec><title>Evaluation</title><sec><title>Evaluation on the Medstract Gold Standard Corpus</title><p>To evaluate the MBA system, we have run it against a publicly available tagged corpus, the Medstract Gold Standard Corpus, which is composed of the DEVELOPMENT corpus with 126 tagged &#x0003c;short form, long form&#x0003e; pairs and the EVALUATION corpus with 168 tagged pairs. The DEVELOPMENT corpus has been used for determining some values before, and the EVALUATION corpus is used for comparing the MBA system with three popular downloadable algorithms:</p><p>&#x02022; the Chang et al. [<xref ref-type="bibr" rid="B9">9</xref>] algorithm (obtained from <ext-link ext-link-type="uri" xlink:href="http://bionlp.stanford.edu/webservices.html"/>) at the three cutoff scores: 0.03, 0.14 and 0.88.</p><p>&#x02022; the SLICE algorithm [<xref ref-type="bibr" rid="B5">5</xref>] (obtained from <ext-link ext-link-type="uri" xlink:href="http://uvdb3.hgc.jp/ALICE/program download.html"/>).</p><p>&#x02022; the S&#x00026;H algorithm [<xref ref-type="bibr" rid="B10">10</xref>] (obtained from <ext-link ext-link-type="uri" xlink:href="http://biotext.berkeley.edu/software.html"/>).</p><p>Our result is strictly based on the corpus without corrections, and the extracted pairs must match the tagged ones exactly. MBA identified 162 &#x0003c;short form, long form&#x0003e; pairs in the result. Out of these, 147 pairs were correct, resulting in a recall of 88% and a precision of 91%. Table <xref ref-type="table" rid="T3">3</xref> indicates the result of that comparison with other algorithms on the gold-standard corpus.</p><table-wrap position="float" id="T3"><label>Table 3</label><caption><p>Comparing with other algorithms on the gold-standard EVALUATION corpus</p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center">Precision</td><td align="center">Recall</td><td align="center">F-measure</td></tr></thead><tbody><tr><td align="center">Chang (score = 0.88)</td><td align="center">93%</td><td align="center">23%</td><td align="center">0.37</td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center">Chang (score = 0.14)</td><td align="center">89%</td><td align="center">76%</td><td align="center">0.82</td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center">Chang (score = 0.03)</td><td align="center">87%</td><td align="center">81%</td><td align="center">0.84</td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center">ALICE</td><td align="center">90%</td><td align="center">77%</td><td align="center">0.83</td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center">S &#x00026; H</td><td align="center">91%</td><td align="center">77%</td><td align="center">0.83</td></tr><tr><td colspan="4"><hr></hr></td></tr><tr><td align="center">MBA</td><td align="center">91%</td><td align="center">88%</td><td align="center">0.89</td></tr></tbody></table></table-wrap><p>In our result fifteen pairs were incorrect: nine pairs were only partially matched (Table <xref ref-type="table" rid="T4">4</xref>); the rest pairs might be &#x0003c;short form, long form&#x0003e; pairs, but not biomedical items (un-tagged in the corpus):</p><table-wrap position="float" id="T4"><label>Table 4</label><caption><p>The partially matched definitions by MBA</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left">abbr.</td><td align="left">true definition</td><td align="left">extracted definition</td></tr></thead><tbody><tr><td align="left">TFIIB</td><td align="left">general transcription factor IIB</td><td align="left">transcription factor IIB</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">Pol I</td><td align="left">RNA polymerase I</td><td align="left">polymerase I</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">Pol II</td><td align="left">RNA polymerase II</td><td align="left">polymerase II</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">VHL</td><td align="left">multiprotein von Hippel-Lindau</td><td align="left">von Hippel-Lindau</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">PKA</td><td align="left">cAMP-dependent protein kinase A</td><td align="left">protein kinase A</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">Hh</td><td align="left">protein Hedgehog</td><td align="left">Hedgehog</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">Ci</td><td align="left">transcription factor Cubitus interruptus</td><td align="left">Cubitus interruptus</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">Fu</td><td align="left">protein kinase Fused</td><td align="left">Fused</td></tr><tr><td colspan="3"><hr></hr></td></tr><tr><td align="left">O-glycans</td><td align="left">serine/threonine-linked oligosaccharides</td><td align="left">oligosaccharides</td></tr></tbody></table></table-wrap><p>&#x02022; lethal of scute (l'sc)</p><p>&#x02022; basic helix-loop-helix (bHLH)</p><p>&#x02022; primary ethylene response element (PERE)</p><p>&#x02022; Ca2+-sensing receptor (CaSR)</p><p>&#x02022; intermediate neuroblasts defective (ind)</p><p>&#x02022; eliminates an AP180 homolog (LAP)</p><p>The system MBA missed twenty-one pairs: nine of them were only partially matched, that is to say, the true definition includes an additional word, for example, "RNA polymerase I (Pol I)", MBA missed the word "RNA"; three non-acronym-type abbreviations were not found because of the insufficient statistical information; for the other nine pairs, the definition and abbreviation were not separated by parentheses. Since nine &#x0003c;short form, long form&#x0003e; pairs are not separated by parentheses, they will be ignored by the abbreviation recognition algorithm. If we do not consider more syntactic cues for abbreviation recognition, MBA can only achieve the highest recall of 95% even if the alignment algorithm and the statistical method are perfect.</p><p>Moreover, we also analyzed the abbreviation database ADAM [<xref ref-type="bibr" rid="B12">12</xref>] based on the gold standard EVALUATION corpus. Firstly, we extracted all of the 168 tagged abbreviations and their corresponding definitions; Secondly, manually input the abbreviations one by one into the form of the webpage <ext-link ext-link-type="uri" xlink:href="http://128.248.65.210/arrowsmith uic/adam.html"/> and then searched the database to check if their corresponding definitions were in the list of "Long-forms and variants". In this way, only 87 abbreviations and their definitions were found in ADAM, resulting in a recall of 52%. This shows that the statistical method can not recognize rare abbreviations, and it is not effective to employ only the statistical method. If our alignment algorithm was solely run on the corpus, it identified 153 pairs. Out of these, 139 pairs were correct, resulting in a recall of 83% and a precision of 91%. Through analyzing the result, we found that many non-acronym-type abbreviations were discarded. So it is necessary for the alignment algorithm to explore the statistical method as described in the paper of Torii et al. [<xref ref-type="bibr" rid="B16">16</xref>].</p></sec><sec><title>Error analysis</title><p>The Medstract Gold Standard Corpus is not large enough for error analysis, so the top 1500 abstracts were selected from the results of a query on the term "protein" in PubMed. In the larger corpus [<xref ref-type="bibr" rid="B17">17</xref>], we ran the MBA system and then investigated how many false &#x0003c;short form, long form&#x0003e; pairs in the result.</p><p>The MBA system identified 2491 &#x0003c;short form, long form&#x0003e; pairs in total, and 119 errors were found, giving an error rate of 4.78%. There were three types of errors as follows:</p><p>1. There were 22 errors in the phase of abbreviation recognition. Twenty-two parenthesized tokens were wrongly recognized as abbreviations (e.g., cis-diamineplatinum (II)).</p><p>2. Some errors (41/119) occurred when the system identified the definitions of the acronym-type abbreviations. The system got either a longer string or a shorter string than the true definition for an abbreviation. Fox example, for the definition "regulatory T cells" of the abbreviation "Tregs", the system wrongly identified "that regulatory T cells" as its definition.</p><p>3. Some errors (56/119) occurred when the system identified the definitions of the non-acronym-type abbreviations. For example, "effective half-maximal concentration" was the definition of "EC(50)", but the system wrongly identified "concentration" as the definition.</p></sec></sec></sec><sec><title>Conclusion</title><p>In this paper, we develop a systematic method for extracting biomedical abbreviations. It consists of four steps mainly: step 1, abbreviation recognition; step 2, construct the candidate definition list; step 3, classify the abbreviations into acronym-type and non-acronym-type groups; step 4, separately identify the definitions of acronym-type and non-acronym-type abbreviations: text alignment algorithm for the former, statistical method for the latter. Our evaluation demonstrates that the MBA system performs better than the others. It can identify the definition of not only acronym-type abbreviations including a little irregular acronym-type abbreviation(e.g., &#x0003c;CNS1, cyclophilin seven suppressor&#x0003e;), but also non-acronym-type abbreviations.</p><p>The MBA system needs a few improvements, although it is good at extracting both acronym-type and non-acronym-type abbreviations. In our study we use a simple method to select the best values for several parameters. At present there are many optimizing methods, such as Genetic Algorithm, Simulated Annealing Algorithm and so on. We have been trying to optimize the parameters with these methods, and this is the topic of our current research. Besides the needed improvement in parameter optimization, the statistical method costs a lot of time in the MBA system, and we need reduce the time cost by either narrowing the searching range or paralleling our algorithm. This is another topic of our current research. Our future work is to set up a biomedical abbreviation server, in which we will consider more syntactic clues in the contexts for better results.</p><p>In conclusion, a literature mining system MBA is developed and applied to extract biomedical abbreviations. MBA could find both acronym-type and non-acronym-type abbreviations effectively. The systematic method can also be used in the general text, or applied in other research areas.</p></sec><sec sec-type="methods"><title>Methods</title><sec><title>data sources</title><p>The Medstract Gold Standard Corpus [<xref ref-type="bibr" rid="B16">16</xref>] and a larger corpus [<xref ref-type="bibr" rid="B16">16</xref>] are used in this paper. The gold standard corpus is just a publicly available tagged corpus, and it is composed of DEVELOPMENT corpus and EVALUATION corpus. The DEVELOPMENT corpus contains 126 &#x0003c;short form, long form&#x0003e; pairs, and the EVALUATION corpus contains 168 pairs. The larger corpus contains 1500 abstracts which were selected from the results of a query on the term "protein" in PubMed.</p></sec><sec><title>Evaluation of the method</title><p>We use the harmonic mean (F-measure) of precision (accuracy) and recall (coverage) that are commonly used in the field to evaluate our results. The precision measures the number of correct &#x0003c;short form, long form&#x0003e; pairs in the answer file over the total number of the pairs in the answer file, and the recall measures the number of correct pairs in the answer file over the total number in the key file. With "TP" labeling true positives, "FP" the false positives and "FN" the false negatives, the measures are:</p><p><disp-formula id="bmcM10"><label>(10)</label><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M11" name="1471-2105-10-14-i11" overflow="scroll"><mml:semantics><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>Precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>Recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mi>N</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>F-measure</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mo>&#x02217;</mml:mo><mml:mi>P</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mo>&#x02217;</mml:mo><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:semantics></mml:math></disp-formula></p></sec></sec><sec><title>Authors' contributions</title><p>ZW designed and implemented the MBA system, analyzed the results and drafted the manuscript. YX partly designed the alignment algorithm, analyzed the results and revised the manuscript. YL, YX and YZ coordinated the project and revised the final manuscript. All authors read and approved the final manuscript.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>We thank Schwartz AS, Hearst MA, Chang JT, Schutze H, Altman RB, Ao H, Takagi T, Zhou W, Torvik VI and Smalheiser NR for providing us their algorithms, and Zhang H, Yu LB, Shao MZ, Yang XQ, Liu SJ, Luan J, Wu XW, Wang H, Wang S, Wang XQ for their support, comments and advice. This work is supported by The Key Project of The National Nature Science Foundation of China (60533020), Chinese 973 project (2007CB947401), and Chinese Natural Science Foundation (30700138).</p></sec></ack><ref-list><ref id="B1"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Jensen</surname><given-names>LJ</given-names></name><name><surname>Saric</surname><given-names>J</given-names></name><name><surname>Bork</surname><given-names>P</given-names></name></person-group><article-title>Literature mining for the biologist: from information retrieval to biological discovery</article-title><source>Nat Rev Gen</source><year>2006</year><volume>7</volume><fpage>119</fpage><lpage>129</lpage><pub-id pub-id-type="doi">10.1038/nrg1768</pub-id></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Cohen</surname><given-names>AM</given-names></name><name><surname>Hersh</surname><given-names>WR</given-names></name></person-group><article-title>A survey of current work in biomedical text mining</article-title><source>Briefings in Bioinformatics</source><year>2005</year><volume>6</volume><fpage>57</fpage><lpage>71</lpage><pub-id pub-id-type="pmid">15826357</pub-id><pub-id pub-id-type="doi">10.1093/bib/6.1.57</pub-id></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Fred</surname><given-names>HL</given-names></name><name><surname>Cheng</surname><given-names>TO</given-names></name></person-group><article-title>Acronymesis: the exploding misuse of acronyms</article-title><source>Tex Heart Inst J</source><year>2003</year><volume>30</volume><fpage>255</fpage><lpage>257</lpage><pub-id pub-id-type="pmid">14677733</pub-id></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Pustejovsky</surname><given-names>J</given-names></name><name><surname>Castano</surname><given-names>J</given-names></name><name><surname>Cochran</surname><given-names>B</given-names></name></person-group><article-title>Automatic extraction of acronym-meaning pairs from medline databases</article-title><source>Stud Health Technol Inform</source><year>2001</year><volume>10</volume><fpage>371</fpage><lpage>375</lpage><pub-id pub-id-type="pmid">11604766</pub-id></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Ao</surname><given-names>H</given-names></name><name><surname>Takagi</surname><given-names>T</given-names></name></person-group><article-title>Alice: An Algorithm to Extract Abbreviations from MEDLINE</article-title><source>J AM Med Inform Assoc</source><year>2005</year><volume>12</volume><fpage>576</fpage><lpage>586</lpage><pub-id pub-id-type="pmid">15905486</pub-id><pub-id pub-id-type="doi">10.1197/jamia.M1757</pub-id></citation></ref><ref id="B6"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Larkey</surname><given-names>LS</given-names></name><name><surname>Ogilvie</surname><given-names>P</given-names></name><name><surname>Price</surname><given-names>MA</given-names></name><name><surname>Tamilio</surname><given-names>B</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Nurnberg PJ, Hicks DL, Furuta R</surname></name></person-group><article-title>Acrophile: an automated acronym extractor and server</article-title><source>Proceedings of the 5th ACM International Conference on Digital Libraries: 02&#x02013;07 June 2000; San Antonio</source><year>2000</year><publisher-name>ACM Press</publisher-name><fpage>205</fpage><lpage>214</lpage></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Yu</surname><given-names>H</given-names></name><name><surname>Hripcsak</surname><given-names>G</given-names></name><name><surname>Friedman</surname><given-names>C</given-names></name></person-group><article-title>Mapping abbreviations to full forms in biomedical articles</article-title><source>J Am Med Inform Assoc</source><year>2002</year><volume>9</volume><fpage>262</fpage><lpage>272</lpage><pub-id pub-id-type="pmid">11971887</pub-id><pub-id pub-id-type="doi">10.1197/jamia.M0913</pub-id></citation></ref><ref id="B8"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Park</surname><given-names>Y</given-names></name><name><surname>Byrd</surname><given-names>RJ</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Lee L, Harman D</surname></name></person-group><article-title>Hybrid Text Mining for Finding Abbreviations and Their Definitions</article-title><source>Proceedings of the 6th Conference on Empirical Methods in Natural Language Processing: 03&#x02013;04 June 2001; Pittsburgh</source><year>2001</year><publisher-name>Association for Computational Linguistics Press</publisher-name><fpage>126</fpage><lpage>133</lpage></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chang</surname><given-names>JT</given-names></name><name><surname>Schutze</surname><given-names>H</given-names></name><name><surname>Altman</surname><given-names>RB</given-names></name></person-group><article-title>Creating an Online Dictionary of Abbreviations from MEDLINE</article-title><source>J Am Med Inform Assoc</source><year>2002</year><volume>9</volume><fpage>612</fpage><lpage>620</lpage><pub-id pub-id-type="pmid">12386112</pub-id><pub-id pub-id-type="doi">10.1197/jamia.M1139</pub-id></citation></ref><ref id="B10"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Schwartz</surname><given-names>AS</given-names></name><name><surname>Hearst</surname><given-names>MA</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Altman RB, Dukner AK, Hunter L, Jung TA</surname></name></person-group><article-title>A Simple Algorithm for Identifying Abbreviation Definitions in Biomedical Text</article-title><source>Proceedings of the 8th Pacific Sym-posium on Biocomputing: 03&#x02013;07 January 2003; Lihue, Hawaii</source><year>2003</year><publisher-name>Klein TE: World Scientific Press</publisher-name><fpage>451</fpage><lpage>462</lpage></citation></ref><ref id="B11"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Taghva</surname><given-names>K</given-names></name><name><surname>Gilbreth</surname><given-names>J</given-names></name></person-group><article-title>Recognizing Acronyms and Their Definitions</article-title><source>Technical Report</source><year>1995</year><publisher-name>Information Science Research Institute, University of Nevada, Las Vegas</publisher-name></citation></ref><ref id="B12"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Zhou</surname><given-names>W</given-names></name><name><surname>Torvik</surname><given-names>VI</given-names></name><name><surname>Smalheiser</surname><given-names>NR</given-names></name></person-group><article-title>ADAM: another database of abbreviations in MEDLINE</article-title><source>Bioinformatics</source><year>2006</year><volume>22</volume><fpage>2813</fpage><lpage>2818</lpage><pub-id pub-id-type="pmid">16982707</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btl480</pub-id></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Okazaki</surname><given-names>N</given-names></name><name><surname>Ananiadou</surname><given-names>S</given-names></name></person-group><article-title>Building an Abbreviation Dictionary using a Term Recognition Approach</article-title><source>Bioinformatics</source><year>2006</year><volume>22</volume><fpage>3089</fpage><lpage>3095</lpage><pub-id pub-id-type="pmid">17050571</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btl534</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Needleman</surname><given-names>S</given-names></name><name><surname>Wunsch</surname><given-names>C</given-names></name></person-group><article-title>A general method applicable to the search for simi-larities in the amino acid sequence of two proteins</article-title><source>J Mol Biol</source><year>1970</year><volume>48</volume><fpage>443</fpage><lpage>453</lpage><pub-id pub-id-type="pmid">5420325</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(70)90057-4</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>TF</given-names></name><name><surname>Waterman</surname><given-names>MS</given-names></name></person-group><article-title>Identification of Common Molecular Subsequences</article-title><source>J Mol Biol</source><year>1981</year><volume>147</volume><fpage>195</fpage><lpage>197</lpage><pub-id pub-id-type="pmid">7265238</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Torii</surname><given-names>M</given-names></name><name><surname>Hu</surname><given-names>ZZ</given-names></name><name><surname>Song</surname><given-names>M</given-names></name><name><surname>Wu</surname><given-names>CH</given-names></name><name><surname>Liu</surname><given-names>H</given-names></name></person-group><article-title>A comparison study on algorithms of detecting long forms for short forms in biomedical text</article-title><source>BMC Bioinformatics</source><year>2007</year><volume>8</volume><fpage>S5</fpage><pub-id pub-id-type="pmid">18047706</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-8-S9-S5</pub-id></citation></ref><ref id="B17"><citation citation-type="other"><article-title>The Medstract Gold Standard Corpus and the larger corpus</article-title><ext-link ext-link-type="uri" xlink:href="http://bioinformatics.lcd-ustc.org/abbreviation/data.php"/></citation></ref></ref-list></back></article>