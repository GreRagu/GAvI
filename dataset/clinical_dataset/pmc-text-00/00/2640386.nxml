<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd"><article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">19087280</article-id><article-id pub-id-type="pmc">2640386</article-id><article-id pub-id-type="publisher-id">1471-2105-9-534</article-id><article-id pub-id-type="doi">10.1186/1471-2105-9-534</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>Optimal neighborhood indexing for protein similarity search</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>Peterlongo</surname><given-names>Pierre</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>pierre.peterlongo@irisa.fr</email></contrib><contrib id="A2" contrib-type="author"><name><surname>No&#x000e9;</surname><given-names>Laurent</given-names></name><xref ref-type="aff" rid="I2">2</xref><xref ref-type="aff" rid="I3">3</xref><email>laurent.noe@lifl.fr</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Lavenier</surname><given-names>Dominique</given-names></name><xref ref-type="aff" rid="I4">4</xref><email>dominique.lavenier@irisa.fr</email></contrib><contrib id="A4" contrib-type="author"><name><surname>Nguyen</surname><given-names>Van Hoa</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>vhnguyen@irisa.fr</email></contrib><contrib id="A5" contrib-type="author"><name><surname>Kucherov</surname><given-names>Gregory</given-names></name><xref ref-type="aff" rid="I2">2</xref><xref ref-type="aff" rid="I3">3</xref><email>gregory.kucherov@lifl.fr</email></contrib><contrib id="A6" contrib-type="author"><name><surname>Giraud</surname><given-names>Mathieu</given-names></name><xref ref-type="aff" rid="I2">2</xref><xref ref-type="aff" rid="I3">3</xref><email>mathieu.giraud@lifl.fr</email></contrib></contrib-group><aff id="I1"><label>1</label>Symbiose team-project, IRISA INRIA, Rennes, France</aff><aff id="I2"><label>2</label>LIFL, CNRS, Universit&#x000e9; Lille 1, Lille, France</aff><aff id="I3"><label>3</label>INRIA Lille Nord-Europe, Lille, France</aff><aff id="I4"><label>4</label>IRISA &#x02013; ENS Cachan, France</aff><pub-date pub-type="collection"><year>2008</year></pub-date><pub-date pub-type="epub"><day>16</day><month>12</month><year>2008</year></pub-date><volume>9</volume><fpage>534</fpage><lpage>534</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/9/534"/><history><date date-type="received"><day>30</day><month>5</month><year>2008</year></date><date date-type="accepted"><day>16</day><month>12</month><year>2008</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2008 Peterlongo et al; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2008</copyright-year><copyright-holder>Peterlongo et al; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p><!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>               Peterlongo               Pierre                              pierre.peterlongo@irisa.fr            </dc:author><dc:title>            Optimal neighborhood indexing for protein similarity search         </dc:title><dc:date>2008</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 9(1): 534-. (2008)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2008)9:1&#x0003c;534&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>--></license></permissions><abstract><sec><title>Background</title><p>Similarity inference, one of the main bioinformatics tasks, has to face an exponential growth of the biological data. A classical approach used to cope with this data flow involves heuristics with large seed indexes. In order to speed up this technique, the index can be enhanced by storing additional information to limit the number of random memory accesses. However, this improvement leads to a larger index that may become a bottleneck. In the case of protein similarity search, we propose to decrease the index size by reducing the amino acid alphabet.</p></sec><sec><title>Results</title><p>The paper presents two main contributions. First, we show that an optimal neighborhood indexing combining an alphabet reduction and a longer neighborhood leads to a reduction of 35% of memory involved into the process, without sacrificing the quality of results nor the computational time. Second, our approach led us to develop a new kind of substitution score matrices and their associated <italic>e</italic>-value parameters. In contrast to usual matrices, these matrices are rectangular since they compare amino acid groups from different alphabets. We describe the method used for computing those matrices and we provide some typical examples that can be used in such comparisons. Supplementary data can be found on the website <ext-link ext-link-type="uri" xlink:href="http://bioinfo.lifl.fr/reblosum"/>.</p></sec><sec><title>Conclusion</title><p>We propose a practical index size reduction of the neighborhood data, that does not negatively affect the performance of large-scale search in protein sequences. Such an index can be used in any study involving large protein data. Moreover, rectangular substitution score matrices and their associated statistical parameters can have applications in any study involving an alphabet reduction.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>One fundamental task in bioinformatics concerns large scale comparisons between proteins or families of proteins. It often constitutes the first step before further investigations. A typical comparison, for example, is to query a database with a newly discovered sequence. Observed similarities witness a putative common biological function and direct further studies.</p><p>In this paper, we focus on massive protein sequence comparisons: a large database is iteratively compared with relatively short queries (such as newly sequenced data). A possible approach is to use the exact dynamic programming method [<xref ref-type="bibr" rid="B1">1</xref>]. For a given similarity model, this method provides optimal alignments within a quadratic computation time. Some optimizations achieve a sub-quadratic complexity [<xref ref-type="bibr" rid="B2">2</xref>], but the computation time remains prohibitive for large scale comparisons. Thus, in practice, the full dynamic programming approach is applied to comparison of short sequences.</p><p>A successful family of similarity search methods is provided by <italic>seed-based heuristics</italic>, starting with Fasta [<xref ref-type="bibr" rid="B3">3</xref>] and Blast [<xref ref-type="bibr" rid="B4">4</xref>] and including specific methods for protein similarities such as Blastp [<xref ref-type="bibr" rid="B5">5</xref>]. Seed-based heuristics were recently enhanced by advanced seeding tools like the <italic>spaced seeds </italic>used in PatternHunter [<xref ref-type="bibr" rid="B6">6</xref>] or Yass [<xref ref-type="bibr" rid="B7">7</xref>] (see [<xref ref-type="bibr" rid="B8">8</xref>] for a recent survey). Authors of this paper also worked on the alliance between advanced seeds techniques and reconfigurable architectures [<xref ref-type="bibr" rid="B9">9</xref>].</p><p>The main idea of seed-based heuristics is to anchor the detection of similarities using matching short words or short subsequences occurring in both compared sequences. The form of these words or subsequences is provided by a pattern called a <italic>seed</italic>. A word that respects the seed is called a <italic>key</italic>. For instance, MVK is one of 20<sup>3 </sup>possible keys for the seed of three consecutive characters on the protein alphabet. Detection of similarities between two strings is done in three stages, as presented in Figure <xref ref-type="fig" rid="F1">1</xref>:</p><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>Schematic view of a Blast-like 3-stage algorithm</bold>. Representation of the three stages of comparison of a query (vertical) against a database (horizontal): Stage 1: identify seeds, i.e. small patterns occurring in both the query and the database (black diagonals). Stage 2: compute seed extensions and keep only those for which the score verifies at threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M1" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> (brown diagonals). On the Figure, seeds (<italic>a</italic>) and (<italic>b</italic>) are successfully extended. Stage 3: perform a full dynamic programming computation (white squares) on remaining seeds. In this example, only seed (<italic>b</italic>) leads to a significant alignment.</p></caption><graphic xlink:href="1471-2105-9-534-1"/></fig><p>&#x02022; Stage 1: search for keys that occur in both strings,</p><p>&#x02022; Stage 2: extension of these matching keys with an ungapped alignment, keeping only the alignments with a score greater than a given threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M2" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula>,</p><p>&#x02022; Stage 3: full dynamic programming algorithm, applied only to successfully extended matching keys.</p><p>In this work, we consider comparisons between a set of protein queries against a large protein database of <italic>N </italic>amino acids. A common usage of Blast is to index the queries, and then to scan the full database at the runtime. If the size of the query and the database allow it, a full indexation of both leads to advantageous results [<xref ref-type="bibr" rid="B10">10</xref>]. In our work, we applied approach used e.g. in Blat [<xref ref-type="bibr" rid="B11">11</xref>] where the database is indexed once and each query is successively processed.</p><p>To be efficient, the database positions are indexed by seed keys. The usual indexing scheme is shown Figure <xref ref-type="fig" rid="F2">2</xref>: for each key, a list of all its occurrences is stored. At Stage 1, each query position corresponds to a seed key (or, for the Blastp approach, a set of seed keys that are similar to the query seed key). An index access provides the list of key occurrences in the database, enabling Stage 2. We call such an approach the offset indexing approach. In this case, for each seed position, an offset of &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; bits is stored. The index size is thus equal to <italic>S</italic><sub>offset </sub>= <italic>N </italic>&#x000d7; &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; bits.</p><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>Offset indexing</bold>. Fragment of an offset index. For each seed key (here composed of three letters), the list of its occurrence positions is stored.</p></caption><graphic xlink:href="1471-2105-9-534-2"/></fig><p>For each query position, each execution of Stage 2 needs to access all the occurrences of the corresponding key. This leads to numerous random memory accesses that are time consuming: memory accesses at random positions are not efficiently cached and require high latencies [<xref ref-type="bibr" rid="B12">12</xref>]. A way to reduce the computation time is thus to avoid as far as possible such random memory accesses. For that purpose, it is possible to additionally store, for each key occurrence, its left and right neighborhoods in the sequence, as illustrated in Figure <xref ref-type="fig" rid="F3">3</xref>. Thus, given a position in the query and its corresponding key, all neighborhoods of this key occurrences in the database are obtained through a single random memory access. For each database position, two neighborhoods are additionally stored. We call this indexing approach the neighborhood indexing approach. The overall index size is then equal to <italic>S</italic><sub>neighborhood </sub>= <italic>N </italic>&#x000d7; (&#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; + 2<italic>&#x003b1;L</italic>) bits, where</p><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>Neighborhood indexing</bold>. Fragment of a neighborhood index. For each seed key, the list of its occurrence positions is stored. For each occurrence, its right and left neighborhoods are additionally stored.</p></caption><graphic xlink:href="1471-2105-9-534-3"/></fig><p>&#x02022; <italic>&#x003b1; </italic>is the number of bits for coding a character (amino acid), and</p><p>&#x02022; <italic>L </italic>is the length of each neighborhood.</p><p>As seen in Figure <xref ref-type="fig" rid="F4">4</xref>, the main advantage of the neighborhood indexing is that it speeds up the execution time by a factor ranging between 1.5 and 2 over the offset indexing. The actual speed gain depends on the database length and on many implementation and architecture parameters (such as memory and cache sizes, cache strategies and access times) that will not be discussed here. An obvious drawback of the neighborhood indexing is the additional memory it requires to store neighborhoods. Comparing the two indexing schemes, the ratio <italic>r </italic>between the overall index sizes of the neighborhood indexing and the offset indexing is</p><fig position="float" id="F4"><label>Figure 4</label><caption><p><bold>Time saved by neighborhood indexing compared to offset indexing</bold>. Execution time using the offset indexing and the neighborhood indexing for comparing a growing set of queries against a bank of 70&#x000b7;10<sup>3 </sup>proteins.</p></caption><graphic xlink:href="1471-2105-9-534-4"/></fig><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M3" name="1471-2105-9-534-i2" overflow="scroll"><mml:semantics><mml:mrow><mml:mi>r</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mtext>neighborhood</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mtext>offset</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mi>&#x003b1;</mml:mi><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo>&#x02308;</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>log</mml:mi><mml:mo>&#x02061;</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mi>N</mml:mi></mml:mrow><mml:mo>&#x02309;</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>In common experiments, &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; is between 20 and 40, <italic>&#x003b1;L </italic>is between 20 and 200, hence <italic>r </italic>is between 2 and 21. It is worth mentioning that the &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; value is often raised to a more practical 32 or 64 bits, reducing the ratio <italic>r </italic>even more. Storing neighborhoods becomes then relevant with the reduction of memory prices. For instance, the modern technology brings the possibility to get gigabytes of Flash memory in a personal computer for some hundred dollars. It is thus interesting to exploit this storage space as much as possible. It can be used for treating larger databases, but also, as in this work, for speeding up widely used applications.</p><p>However, the index size still remains the main limitation. In this paper, we study how the size of a large neighborhood index can be reduced while preserving the result quality. For this purpose, we worked on reducing as much as possible the ratio <italic>r</italic>. A way for doing this is to reduce the factor <italic>&#x003b1;L</italic>. We propose to simultaneously increase the neighborhood length (<italic>L</italic>) and reduce the alphabet size (2&#x000b7;<italic>&#x003b1;</italic>). We limit the alphabet size by partitioning amino acids into groups. This reduces <italic>a </italic>by encoding neighborhood characters in less than 5 bits required for coding 20 amino acids. Partitioning the amino acids into 16 groups enables to encode each group using 4 bits, and partitioning into 8, 4 or 2 groups enables to encode each group by 3, 2, and 1 bits respectively. All these reduced alphabets are tested in this paper.</p><p>Grouping amino acids was studied in several papers [<xref ref-type="bibr" rid="B13">13</xref>-<xref ref-type="bibr" rid="B16">16</xref>]. Groups can rely on amino acid physical-chemical properties or on a statistical analysis of alignments. For example, the authors of [<xref ref-type="bibr" rid="B13">13</xref>] computed correlation coefficients between pairs of amino acids based on the BLOSUM50 matrix and used a greedy algorithm to merge them. A branch-and-bound algorithm for partitioning the amino acids was proposed in [<xref ref-type="bibr" rid="B14">14</xref>]. Those papers mainly deal with the construction of reduced alphabets, but none of them studies how the alphabet reduction affects the sensitivity of similarity search, or undertakes a quantitative analysis of the trade-off between search sensitivity and index size for those alphabets. This raises the following problem that is solved in this paper: <italic>Can reduced alphabets allow one to decrease the factor &#x003b1;L while preserving the quality of similarity search results?</italic></p></sec><sec><title>Results and discussion</title><p>The main result of our work is an effective reduction of the index size without deteriorating the quality of the results of similarity search. Moreover, we provide substitution score matrices and <italic>e</italic>-value parameters to be used with reduced alphabets. Our results are based on the alphabets defined by the amino acids groups proposed by Li and al. (Table <xref ref-type="table" rid="T2">2</xref> of [<xref ref-type="bibr" rid="B15">15</xref>]). This choice was motivated by empirical tests showing their relevancy with seeds matching. However, our method can be applied to any other amino acids partitions. The website [<xref ref-type="bibr" rid="B17">17</xref>] provides data for all the alphabets reported in [<xref ref-type="bibr" rid="B16">16</xref>].</p><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Stage two algorithm</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left"><bold>Algorithm 1 </bold>Stage 2</td></tr><tr><td align="left"><bold>Ensure</bold>: reports if a matching key occurrence potentially belongs to an alignment</td></tr><tr><td align="left"><bold>Require</bold>: query neighborhoods (left<sub>query </sub>and right<sub>query</sub>)</td></tr><tr><td align="left">1: get database neighborhoods left<sub>db </sub>and right<sub>db</sub></td></tr><tr><td align="left">2: <italic>result</italic><sub>left </sub>&#x02190; 0; <italic>highest</italic><sub>left </sub>&#x02190; 0</td></tr><tr><td align="left">3: <italic>result</italic><sub>right </sub>&#x02190; 0; <italic>highest</italic><sub>right </sub>&#x02190; 0</td></tr><tr><td align="left">4: <bold>for </bold><italic>i </italic>from 1 to <italic>L </italic><bold>do</bold></td></tr><tr><td align="left">5:&#x000a0;&#x000a0;&#x000a0;<italic>result</italic><sub>left </sub>&#x02190; <italic>result</italic><sub>left </sub>+ <italic>subst</italic>_<italic>score </italic>(left<sub>db </sub>[<italic>i</italic>], left<sub>query </sub>[<italic>i</italic>])</td></tr><tr><td align="left">6:&#x000a0;&#x000a0;&#x000a0;<bold>if </bold><italic>result</italic><sub>left </sub>&#x0003e; <italic>highest</italic><sub>left </sub><bold>then </bold><italic>highest</italic><sub>left </sub>&#x02190; <italic>result</italic><sub>left </sub><bold>endif</bold></td></tr><tr><td align="left">7: <bold>end for</bold></td></tr><tr><td align="left">8: <bold>for </bold><italic>i </italic>from 1 to <italic>L </italic><bold>do</bold></td></tr><tr><td align="left">9:&#x000a0;&#x000a0;&#x000a0;<italic>result</italic><sub>right </sub>&#x02190; <italic>result</italic><sub>right </sub>+ <italic>subst</italic>_<italic>score</italic>(right<sub>db </sub>[<italic>i</italic>], right<sub>query </sub>[<italic>i</italic>])</td></tr><tr><td align="left">10:&#x000a0;&#x000a0;&#x000a0;<bold>if </bold><italic>result</italic><sub>right </sub>&#x0003e; <italic>highest</italic><sub>right </sub><bold>then </bold><italic>highest</italic><sub>right </sub>&#x02190; <italic>result</italic><sub>right </sub><bold>endif</bold></td></tr><tr><td align="left">11: <bold>end for</bold></td></tr><tr><td align="left">12: <bold>if </bold><italic>highest</italic><sub>left </sub>+ <italic>highest</italic><sub>right </sub>&#x02265; threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M4" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula><bold>then </bold>return <bold>true endif</bold></td></tr><tr><td align="left">13: return <bold>false</bold></td></tr></tbody></table></table-wrap><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>Memory for neighborhood storage for different alphabets with adapted neighborhood lengths</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="center">indexed neighborhood alphabet</td><td align="center">bits per character (<italic>&#x003b1;</italic>)</td><td align="center">neighborhoods length (<italic>L</italic>)</td><td align="center">total per index line (2<italic>&#x003b1;L</italic>)</td><td align="center">relative gain compared to &#x003a3;<sub>20 </sub>(1 &#x02013; 2<italic>&#x003b1;L/</italic>110)</td><td></td></tr></thead><tbody><tr><td align="center">&#x003a3;<sub>20</sub></td><td align="center">5</td><td align="center">11</td><td align="center">110</td><td align="center">0%</td><td align="center">Memory</td></tr><tr><td align="center">&#x003a3;<sub>16</sub></td><td align="center">4</td><td align="center">12</td><td align="center">96</td><td align="center">13%</td><td></td></tr><tr><td align="center">&#x003a3;<sub>8</sub></td><td align="center">3</td><td align="center">14</td><td align="center">84</td><td align="center">24%</td><td></td></tr><tr><td align="center">&#x003a3;<sub>4</sub></td><td align="center">2</td><td align="center">19</td><td align="center">76</td><td align="center">31%</td><td></td></tr><tr><td align="center">&#x003a3;<sub>2</sub></td><td align="center">1</td><td align="center">32</td><td align="center">64</td><td align="center">42%</td><td></td></tr></tbody></table><table-wrap-foot><p>for neighborhood storage is computed with respect to sensitivity/selectivity trade-offs shown on Figure <xref ref-type="fig" rid="F7">7</xref>.</p></table-wrap-foot></table-wrap><p>In the rest of the paper, the original alphabet of 20 amino acids is denoted by &#x003a3;<sub>20</sub>, where each character is encoded by 5 bits. Reduced alphabets &#x003a3;<sub>16</sub>, &#x003a3;<sub>8</sub>, &#x003a3;<sub>4 </sub>and &#x003a3;<sub>2</sub>, respectively of size 16, 8, 4 and 2, have each character encoded by 4, 3, 2 and 1 bits respectively. Those alphabets, taken from Table <xref ref-type="table" rid="T2">2</xref> of [<xref ref-type="bibr" rid="B15">15</xref>], are defined by</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M5" name="1471-2105-9-534-i3" overflow="scroll"><mml:semantics><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>&#x003a3;</mml:mi><mml:mrow><mml:mn>16</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>{</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>F</mml:mi><mml:mi>Y</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>W</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>M</mml:mi><mml:mi>L</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>I</mml:mi><mml:mi>V</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>P</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>N</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>H</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>Q</mml:mi><mml:mi>E</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>R</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>K</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>&#x003a3;</mml:mi><mml:mn>8</mml:mn></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>{</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>C</mml:mi><mml:mi>F</mml:mi><mml:mi>Y</mml:mi><mml:mi>W</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>M</mml:mi><mml:mi>L</mml:mi><mml:mi>I</mml:mi><mml:mi>V</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>P</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>A</mml:mi><mml:mi>T</mml:mi><mml:mi>S</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mi>N</mml:mi><mml:mi>H</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>Q</mml:mi><mml:mi>E</mml:mi><mml:mi>D</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>R</mml:mi><mml:mi>K</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>&#x003a3;</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>{</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>C</mml:mi><mml:mi>F</mml:mi><mml:mi>Y</mml:mi><mml:mi>W</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>M</mml:mi><mml:mi>L</mml:mi><mml:mi>I</mml:mi><mml:mi>V</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>G</mml:mi><mml:mi>P</mml:mi><mml:mi>A</mml:mi><mml:mi>T</mml:mi><mml:mi>S</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mi>N</mml:mi><mml:mi>H</mml:mi><mml:mi>Q</mml:mi><mml:mi>E</mml:mi><mml:mi>D</mml:mi><mml:mi>R</mml:mi><mml:mi>K</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>,</mml:mo><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>&#x003a3;</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>{</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>C</mml:mi><mml:mi>F</mml:mi><mml:mi>Y</mml:mi><mml:mi>W</mml:mi><mml:mi>M</mml:mi><mml:mi>L</mml:mi><mml:mi>I</mml:mi><mml:mi>V</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mi>G</mml:mi><mml:mi>P</mml:mi><mml:mi>A</mml:mi><mml:mi>T</mml:mi><mml:mi>S</mml:mi><mml:mi>N</mml:mi><mml:mi>H</mml:mi><mml:mi>Q</mml:mi><mml:mi>E</mml:mi><mml:mi>D</mml:mi><mml:mi>R</mml:mi><mml:mi>K</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>The main idea is to represent the neighborhoods of keys stored in the index (see Figure <xref ref-type="fig" rid="F3">3</xref>) over a reduced alphabet. Consequently, at Stage 2 of the similarity search, amino acid sequences are compared with sequences over the reduced alphabet. By an <italic>alignment over </italic>&#x003a3; &#x000d7; &#x003a3;', we understand an alignment between a sequence over &#x003a3; and a sequence over &#x003a3;'. Thus, in this paper we will consider alignments over &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20</sub>, &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub>, &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub>, &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4 </sub>and &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub>.</p><p>In the next sections, we describe how to evaluate the quality of Stage 2 and how a substantial index size reduction can be obtained by using longer neighborhoods on reduced alphabets. As presented in Figure <xref ref-type="fig" rid="F5">5</xref>, using a reduced alphabet involves several parameters that we study in the following sections. In section <italic>Rectangular substitution score matrices</italic>, we present substitution score matrices used for alignments over &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8 </sub>and &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub>. We then present the computation of <italic>e</italic>-value to estimate the significance of alignments over reduced alphabets. The last section, <italic>Experimental validation</italic>, describes a practical application of reduced alphabets to real biological data.</p><fig position="float" id="F5"><label>Figure 5</label><caption><p><bold>Parameters involved in alphabet reduction</bold>. Once an alphabet and a sensitivity/selectivity ratio are chosen, several parameters are computed. Substitution score matrix and <italic>e</italic>-value parameters depend only on the alphabet and the model probabilities, whereas the optimal neighborhood size and the threshold depends also on the sensitivity/selectivity level.</p></caption><graphic xlink:href="1471-2105-9-534-5"/></fig><sec><title>Stage 2 algorithm and quality</title><p>A detailed description of Stage 2 is given in Algorithm 1 (Table <xref ref-type="table" rid="T1">1</xref>). Query and database neighborhoods of a matching key (detected during Stage 1) are compared character by character over <italic>L </italic>positions. During this comparison that uses substitution score matrices (lines 1 and 1), the highest scores for the left and right neighborhoods are kept (lines 1 and 1). If the sum of the highest scores exceeds a threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M6" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula>, the alignment is kept for Stage 3 (line 1), otherwise it is rejected (line 1). Note that in the offset indexing case, a random memory access is performed in order to retrieve neighborhoods left<sub><italic>db </italic></sub>and right<sub><italic>db </italic></sub>(line 1). This is not the case for the neighborhood indexing, as the neighborhoods are stored directly in the index.</p><p>The quality of Stage 2 is measured by a trade-off between its sensitivity (ability to extend true alignments) and selectivity (ability to filter out spurious seed hits). Computation of those values is described page 10.</p><p>Increasing the threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M7" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> or decreasing the neighborhood length <italic>L </italic>makes Stage 2 more selective but less sensitive (faster execution at the price of worse quality results) while decreasing <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M8" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> or increasing <italic>L </italic>increases the sensitivity and decreases the selectivity (better quality results at the price of a slower execution).</p></sec><sec><title>Reducing the index size by 35% without loss of quality</title><p>As shown in Figure <xref ref-type="fig" rid="F6">6</xref>, the sensitivity/selectivity trade-off follows a convex curve. We propose here to achieve an equivalent trade-off with a reduction of the index size.</p><fig position="float" id="F6"><label>Figure 6</label><caption><p><bold>Sensitivity/selectivity trade-off using different alphabets with a constant neighborhood length</bold>. Sensitivity/selectivity trade-off for two neighborhoods of length 11 (other lengths give similar results). When the length is fixed, reduced alphabets provide worse results than the &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20 </sub>alphabet. The curves for alphabets &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4 </sub>and &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub>, not shown, are even worse.</p></caption><graphic xlink:href="1471-2105-9-534-6"/></fig><p>Clearly, for a fixed neighborhood length <italic>L </italic>(in Figure <xref ref-type="fig" rid="F6">6</xref>, 16 amino acids), the sensitivity/selectivity trade-off is always better when using the full amino acid alphabets than a reduced alphabet. This is easily explained by the fact that reducing the alphabet size decreases the alignment accuracy. In order to keep up with the sensitivity/selectivity ratio, the neighborhood length <italic>L </italic>should be increased. In Figure <xref ref-type="fig" rid="F7">7</xref>, all reduced alphabets, used with increased neighborhood lengths, now perform equivalently (or slightly better) than the full alphabet.</p><fig position="float" id="F7"><label>Figure 7</label><caption><p><bold>Sensitivity/selectivity trade-off using different alphabets with adapted neighborhood lengths</bold>. Sensitivity/selectivity trade-off for two neighborhoods with the adapted lengths of Table <xref ref-type="table" rid="T2">2</xref>. Now all reduced alphabets are equivalent (or slightly better, due to integer rounding of the neighborhood lengths) than the original alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20</sub>.</p></caption><graphic xlink:href="1471-2105-9-534-7"/></fig><p>Figure <xref ref-type="fig" rid="F8">8</xref> shows the dependency, for different reduced alphabets, between the number of bits needed to store both neighborhoods (X axis) and the selectivity (Y axis), for an equivalent quality (fixed sensitivity). Those results are obtained with the use of special substitution score matrices, adapted to reduced alphabets, that are presented in the next section. Our main result is that for any given selectivity, using any of the reduced alphabets for storing neighborhoods leads to a smaller <italic>&#x003b1;L </italic>factor than for the &#x003a3;<sub>20 </sub>alphabet. Therefore, for a fixed memory usage, the sensitivity/selectivity trade-off is always better with a reduced alphabet than with the full &#x003a3;<sub>20 </sub>alphabet.</p><fig position="float" id="F8"><label>Figure 8</label><caption><p><bold>Memory for neighborhood storage for different alphabets at a fixed sensitivity</bold>. Memory space needed to achieve a sensitivity close to 0.95. The same quality can be achieved with 64 bits (2 neighborhoods of 32 amino acids encoded in 1 bit, sensitivity of 0.9499, selectivity of 0.0112) instead of 110 bits (2 neighborhoods of 11 amino acids encoded in 5 bits, sensitivity of 0.9500, selectivity of 0.0111). All reduced rectangular alphabets lead to smaller index sizes than the regular &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20 </sub>alphabet.</p></caption><graphic xlink:href="1471-2105-9-534-8"/></fig><p>In practice, this result enables a reduction of the index size without any sacrifice in running time or in result quality. Table <xref ref-type="table" rid="T2">2</xref> shows the memory requirements for different alphabets. We obtain a practical reduction of 42% of the factor <italic>&#x003b1;L </italic>using the reduced alphabet &#x003a3;<sub>2 </sub>instead of &#x003a3;<sub>20</sub>. The ratio <italic>r </italic>on the overall index size is then reduced by 35%.</p></sec><sec><title>Rectangular substitution score matrices</title><p>We designed a method for computing substitution score matrices for any pair of possibly reduced amino acid alphabets. As this method is based on the original programs of [<xref ref-type="bibr" rid="B18">18</xref>], we call such matrices R<sc>E</sc>B<sc>LOSUM</sc> for Rectangular B<sc>LOSUM</sc> matrices. The R<sc>E</sc>B<sc>LOSUM</sc> matrices for alphabets &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20 </sub>are the original B<sc>LOSUM</sc> matrices. Tables <xref ref-type="table" rid="T3">3</xref>, <xref ref-type="table" rid="T4">4</xref>, <xref ref-type="table" rid="T5">5</xref> and <xref ref-type="table" rid="T6">6</xref> present R<sc>E</sc>B<sc>LOSUM</sc> matrices for alignments over alphabets &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub>, &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub>, &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4 </sub>and &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2 </sub>respectively.</p><table-wrap position="float" id="T3"><label>Table 3</label><caption><p>R<sc>E</sc>B<sc>LOSUM</sc> 62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub></p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center"><italic>C</italic></td><td align="center"><italic>F</italic></td><td align="center"><italic>Y</italic></td><td align="center"><italic>W</italic></td><td align="center"><italic>M</italic></td><td align="center"><italic>L</italic></td><td align="center"><italic>I</italic></td><td align="center"><italic>V</italic></td><td align="center"><italic>G</italic></td><td align="center"><italic>P</italic></td><td align="center"><italic>A</italic></td><td align="center"><italic>T</italic></td><td align="center"><italic>S</italic></td><td align="center"><italic>N</italic></td><td align="center"><italic>H</italic></td><td align="center"><italic>Q</italic></td><td align="center"><italic>E</italic></td><td align="center"><italic>D</italic></td><td align="center"><italic>R</italic></td><td align="center"><italic>K</italic></td></tr></thead><tbody><tr><td align="left">[<italic>C</italic>]</td><td align="center"><bold>9</bold></td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-3</td><td align="center">-3</td><td align="center">0</td><td align="center">-1</td><td align="center">-1</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td></tr><tr><td align="left">[<italic>FY</italic>]</td><td align="center">-2</td><td align="center"><bold>5</bold></td><td align="center"><bold>5</bold></td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">-1</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">0</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td></tr><tr><td align="left">[<italic>W</italic>]</td><td align="center">-2</td><td align="center">1</td><td align="center">2</td><td align="center"><bold>11</bold></td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-4</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-4</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-3</td></tr><tr><td align="left">[<italic>ML</italic>]</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">-2</td><td align="center"><bold>3</bold></td><td align="center"><bold>4</bold></td><td align="center">1</td><td align="center">1</td><td align="center">-3</td><td align="center">-3</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="left">[<italic>IV</italic>]</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">-3</td><td align="center">1</td><td align="center">1</td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center">-3</td><td align="center">-3</td><td align="center">-1</td><td align="center">0</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td></tr><tr><td align="left">[<italic>G</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-4</td><td align="center">-4</td><td align="center">-3</td><td align="center"><bold>6</bold></td><td align="center">-2</td><td align="center">0</td><td align="center">-2</td><td align="center">0</td><td align="center">0</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="left">[<italic>P</italic>]</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center"><bold>7</bold></td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-1</td></tr><tr><td align="left">[<italic>A</italic>]</td><td align="center">0</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center"><bold>4</bold></td><td align="center">0</td><td align="center">1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td></tr><tr><td align="left">[<italic>T</italic>]</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">-2</td><td align="center">-1</td><td align="center">0</td><td align="center"><bold>5</bold></td><td align="center">1</td><td align="center">0</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td></tr><tr><td align="left">[<italic>S</italic>]</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">0</td><td align="center">-1</td><td align="center">1</td><td align="center">1</td><td align="center"><bold>4</bold></td><td align="center">1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td></tr><tr><td align="left">[<italic>N</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">0</td><td align="center">-2</td><td align="center">-2</td><td align="center">0</td><td align="center">1</td><td align="center"><bold>6</bold></td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="left">[<italic>H</italic>]</td><td align="center">-3</td><td align="center">-1</td><td align="center">2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">1</td><td align="center"><bold>8</bold></td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td></tr><tr><td align="left">[<italic>QE</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="left">[<italic>D</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-3</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-1</td><td align="center">0</td><td align="center">1</td><td align="center">-1</td><td align="center">0</td><td align="center">2</td><td align="center"><bold>6</bold></td><td align="center">-2</td><td align="center">-1</td></tr><tr><td align="left">[<italic>R</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">-2</td><td align="center"><bold>5</bold></td><td align="center">2</td></tr><tr><td align="left">[<italic>K</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">1</td><td align="center">1</td><td align="center">-1</td><td align="center">2</td><td align="center"><bold>5</bold></td></tr></tbody></table><table-wrap-foot><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub>. Scores located on the "diagonal" are shown in bold.</p></table-wrap-foot></table-wrap><table-wrap position="float" id="T4"><label>Table 4</label><caption><p>R<sc>E</sc>B<sc>LOSUM</sc> 62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub></p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center"><italic>C</italic></td><td align="center"><italic>F</italic></td><td align="center"><italic>Y</italic></td><td align="center"><italic>W</italic></td><td align="center"><italic>M</italic></td><td align="center"><italic>L</italic></td><td align="center"><italic>I</italic></td><td align="center"><italic>V</italic></td><td align="center"><italic>G</italic></td><td align="center"><italic>P</italic></td><td align="center"><italic>A</italic></td><td align="center"><italic>T</italic></td><td align="center"><italic>S</italic></td><td align="center"><italic>N</italic></td><td align="center"><italic>H</italic></td><td align="center"><italic>Q</italic></td><td align="center"><italic>E</italic></td><td align="center"><italic>D</italic></td><td align="center"><italic>R</italic></td><td align="center"><italic>K</italic></td></tr></thead><tbody><tr><td align="left">[<italic>CF Y W </italic>]</td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>5</bold></td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">-1</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">0</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td></tr><tr><td align="left">[<italic>M LIV </italic>]</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">-2</td><td align="center"><bold>2</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>2</bold></td><td align="center">-3</td><td align="center">-3</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="left">[<italic>G</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-4</td><td align="center">-4</td><td align="center">-3</td><td align="center"><bold>6</bold></td><td align="center">-2</td><td align="center">0</td><td align="center">-2</td><td align="center">0</td><td align="center">0</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="left">[<italic>P </italic>]</td><td align="center">-3</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center"><bold>7</bold></td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-1</td></tr><tr><td align="left">[<italic>AT S</italic>]</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center">0</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td></tr><tr><td align="left">[<italic>N H</italic>]</td><td align="center">-3</td><td align="center">-2</td><td align="center">0</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">0</td><td align="center"><bold>5</bold></td><td align="center"><bold>5</bold></td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="left">[<italic>QED</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>4</bold></td><td align="center">0</td><td align="center">0</td></tr><tr><td align="left">[<italic>RK</italic>]</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-3</td><td align="center">-1</td><td align="center">-2</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">-1</td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td></tr></tbody></table><table-wrap-foot><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub>. Scores located on the "diagonal" are shown in bold.</p></table-wrap-foot></table-wrap><table-wrap position="float" id="T5"><label>Table 5</label><caption><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4</sub></p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center"><italic>C</italic></td><td align="center"><italic>F</italic></td><td align="center"><italic>Y</italic></td><td align="center"><italic>W</italic></td><td align="center"><italic>M</italic></td><td align="center"><italic>L</italic></td><td align="center"><italic>I</italic></td><td align="center"><italic>V</italic></td><td align="center"><italic>G</italic></td><td align="center"><italic>P</italic></td><td align="center"><italic>A</italic></td><td align="center"><italic>T</italic></td><td align="center"><italic>S</italic></td><td align="center"><italic>N</italic></td><td align="center"><italic>H</italic></td><td align="center"><italic>Q</italic></td><td align="center"><italic>E</italic></td><td align="center"><italic>D</italic></td><td align="center"><italic>R</italic></td><td align="center"><italic>K</italic></td></tr></thead><tbody><tr><td align="left">[<italic>CF Y W </italic>]</td><td align="center"><bold>6</bold></td><td align="center"><bold>6</bold></td><td align="center"><bold>6</bold></td><td align="center"><bold>7</bold></td><td align="center">-1</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-4</td><td align="center">-5</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-4</td><td align="center">-1</td><td align="center">-4</td><td align="center">-4</td><td align="center">-5</td><td align="center">-4</td><td align="center">-4</td></tr><tr><td align="left">[<italic>M LIV </italic>]</td><td align="center">-2</td><td align="center">0</td><td align="center">-2</td><td align="center">-3</td><td align="center"><bold>3</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center">-5</td><td align="center">-4</td><td align="center">-1</td><td align="center">-1</td><td align="center">-3</td><td align="center">-5</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-5</td><td align="center">-4</td><td align="center">-3</td></tr><tr><td align="left">[<italic>GP AT S</italic>]</td><td align="center">-2</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center">-1</td><td align="center">2-</td><td align="center">-1</td><td align="center">-1</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td></tr><tr><td align="left">[<italic>N HQEDRK</italic>]</td><td align="center">-5</td><td align="center">-4</td><td align="center">-2</td><td align="center">-4</td><td align="center">-3</td><td align="center">-4</td><td align="center">-5</td><td align="center">-4</td><td align="center">-2</td><td align="center">-2</td><td align="center">-2</td><td align="center">-1</td><td align="center">0</td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>3</bold></td></tr></tbody></table><table-wrap-foot><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4</sub>. Scores located on the "diagonal" are shown in bold.</p></table-wrap-foot></table-wrap><table-wrap position="float" id="T6"><label>Table 6</label><caption><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub></p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center"><italic>C</italic></td><td align="center"><italic>F</italic></td><td align="center"><italic>Y</italic></td><td align="center"><italic>W</italic></td><td align="center"><italic>M</italic></td><td align="center"><italic>L</italic></td><td align="center"><italic>I</italic></td><td align="center"><italic>V</italic></td><td align="center"><italic>G</italic></td><td align="center"><italic>P</italic></td><td align="center"><italic>A</italic></td><td align="center"><italic>T</italic></td><td align="center"><italic>S</italic></td><td align="center"><italic>N</italic></td><td align="center"><italic>H</italic></td><td align="center"><italic>Q</italic></td><td align="center"><italic>E</italic></td><td align="center"><italic>D</italic></td><td align="center"><italic>R</italic></td><td align="center"><italic>K</italic></td></tr></thead><tbody><tr><td align="left">[<italic>CF Y W M LIV </italic>]</td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>3</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>4</bold></td><td align="center"><bold>3</bold></td><td align="center">-6</td><td align="center">-6</td><td align="center">-2</td><td align="center">-2</td><td align="center">-4</td><td align="center">-6</td><td align="center">-4</td><td align="center">-4</td><td align="center">-6</td><td align="center">-7</td><td align="center">-5</td><td align="center">-5</td></tr><tr><td align="left">[<italic>GP AT SN HQEDRK</italic>]</td><td align="center">-4</td><td align="center">-5</td><td align="center">-4</td><td align="center">-6</td><td align="center">-3</td><td align="center">-5</td><td align="center">-5</td><td align="center">-4</td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>1</bold></td><td align="center"><bold>1</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>1</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td><td align="center"><bold>2</bold></td></tr></tbody></table><table-wrap-foot><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub>. Scores located on the "diagonal" are shown in bold.</p></table-wrap-foot></table-wrap><p>Such matrices can be applied in any method reducing the amino acid alphabets by residue grouping. As one may be interested in using any other pair of alphabets, we additionally propose a web interface [<xref ref-type="bibr" rid="B17">17</xref>]. This web interface computes R<sc>E</sc>B<sc>LOSUM</sc> matrices for other alphabets listed in [<xref ref-type="bibr" rid="B16">16</xref>] and for any custom alphabets provided by the user.</p></sec><sec><title>Parameters for <italic>e</italic>-value computation</title><p>The <italic>e</italic>-value, or <italic>expected value</italic>, provides the expected number of alignments with a given score, when comparing a text <italic>T </italic>and a query <italic>Q </italic>of length <italic>|T | </italic>and <italic>|Q| </italic>respectively. Local alignment methods like Blast sort results by increasing <italic>e</italic>-value, thus reflecting their decreasing significance. In the Blast algorithm, the <italic>e</italic>-value of an alignment is obtained by</p><p><disp-formula><italic>e</italic>-value = <italic>K</italic>&#x000b7;|<italic>Q</italic>| &#x000b7; |<italic>T</italic>| &#x000b7; <italic>e</italic><sup>-<italic>&#x003bb;s</italic></sup>,</disp-formula></p><p>where <italic>s </italic>is the score of the alignment obtained with substitution matrices. Parameters <italic>&#x003bb; </italic>and <italic>K </italic>are two constants that fit the Gumbel law, computed using methods described in [<xref ref-type="bibr" rid="B19">19</xref>]. Table <xref ref-type="table" rid="T7">7</xref> provides those parameters for several R<sc>E</sc>B<sc>LOSUM</sc> substitution matrices.</p><table-wrap position="float" id="T7"><label>Table 7</label><caption><p>Gumbel law parameters <italic>&#x003bb; </italic>and <italic>K </italic>for different alphabets, obtained with the corresponding R<sc>E</sc>B<sc>LOSUM</sc> score matrices.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="center">alphabets</td><td align="center"><italic>&#x003bb;</italic></td><td align="center"><italic>K</italic></td></tr></thead><tbody><tr><td align="center">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20</sub></td><td align="center">0.320</td><td align="center">0.139</td></tr><tr><td align="center">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub></td><td align="center">0.333</td><td align="center">0.143</td></tr><tr><td align="center">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub></td><td align="center">0.223</td><td align="center">0.142</td></tr><tr><td align="center">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4</sub></td><td align="center">0.212</td><td align="center">0.128</td></tr><tr><td align="center">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub></td><td align="center">0.161</td><td align="center">0.101</td></tr></tbody></table><table-wrap-foot><p>R<sc>E</sc>B<sc>LOSUM</sc>62 matrix for alphabet &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub>. Scores located on the "diagonal" are shown in bold.</p></table-wrap-foot></table-wrap></sec><sec><title>Experimental validation</title><p>In a model where the Stage 2 alignments are ungapped, using reduced alphabets and alignments on longer neighborhoods can however affect the result quality. Indeed, the longer the neighborhoods are, the bigger is the chance to meet a gap in the sequences. More generally, the probabilities distributions used in theoretical sensitivity and selectivity computations do not truly reflect the nature of the biological sequences.</p><p>We thus validated our approach with large-scale tests on biological sequences. We set a database to be the hard-masked human chromosome 21 (UCSC Release hg18) translated according to the six possible reading frames. The query set was a set of seven archea and bacteria proteomes derived from a study of mitochondrial diseases. This set was selected for is interest toward the detection of potential insertions of mitochondrial genes in the human genome. Moreover, testing out our approach comparing such distant species represents one of the hardest application case. Indeed more typical homology searches on closer sequences is easier. Tests on such homology searches could have hidden potential issue on our approach.</p><p>The database contained 12 700 507 amino acids whereas the query was composed by 5 321 439 amino acids. Using the ssearch method [<xref ref-type="bibr" rid="B20">20</xref>], 650 alignments were obtained between the database and the query (maximal <italic>e</italic>-value: 10<sup>-3</sup>). This set of exhaustive <italic>optimum </italic>alignments was sufficient to validate our method in comparison with results obtained using different alphabets. The seed used in Stage 1 was a subset seed (see [<xref ref-type="bibr" rid="B21">21</xref>]), as in [<xref ref-type="bibr" rid="B9">9</xref>]. For the neighborhood indexing, we indexed the database using each of the alphabets &#x003a3;<sub>20</sub>, &#x003a3;<sub>16</sub>, &#x003a3;<sub>8</sub>, &#x003a3;<sub>4 </sub>and &#x003a3;<sub>2</sub>. We selected the neighborhood length to have a theoretical sensitivity close to 0.95 and a theoretical selectivity close to 0.01. Theoretical sensitivity and selectivity are defined according distributions presented on page 10.</p><p>This leads to indexing 2 &#x000d7; 11 characters for &#x003a3;<sub>20</sub>, 2 &#x000d7; 12 characters for &#x003a3;<sub>16</sub>, 2 &#x000d7; 14 characters on &#x003a3;<sub>8</sub>, 2 &#x000d7; 19 characters for &#x003a3;<sub>4</sub>, and 2 &#x000d7; 32 characters for &#x003a3;<sub>2 </sub>(Figure <xref ref-type="fig" rid="F7">7</xref>). The database index sizes are reported in Table <xref ref-type="table" rid="T9">9</xref>. Using alphabet &#x003a3;<sub>2 </sub>instead of &#x003a3;<sub>20 </sub>reduces the overall index size: the ratio <italic>r </italic>goes from <italic>r</italic><sub>20 </sub>= 5.58 to only <italic>r</italic><sub>2 </sub>= 3.67, that is a 35% reduction. The initial assumption of ungapped alignments in the Stage 2 can be wrong with a neighborhood length of 2 &#x000d7; 32. Thus one could prefer to use the alphabet &#x003a3;<sub>4 </sub>with 2 &#x000d7; 19 characters, giving a 25% reduction of the overall index size (<italic>r</italic><sub>4 </sub>= 4.17).</p><table-wrap position="float" id="T8"><label>Table 8</label><caption><p>Practical results for different alphabets &#x02013; Quality estimations</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left">alphabets</td><td align="center">number of positions validating Stage 1 and Stage 2</td><td align="center">practical selectivity</td><td align="center">number of detected alignments</td><td align="center">practical sensitivity</td></tr></thead><tbody><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20</sub></td><td align="center">2.14 * 10<sup>6</sup></td><td align="center">1.35 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub></td><td align="center">1.39 * 10<sup>6</sup></td><td align="center">0.88 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>16</sub></td><td align="center">0.98 * 10<sup>6</sup></td><td align="center">0.62 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>8</sub></td><td align="center">0.62 * 10<sup>6</sup></td><td align="center">0.39 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>4</sub></td><td align="center">3.14 * 10<sup>6</sup></td><td align="center">1.98 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr><tr><td align="left">&#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>2</sub></td><td align="center">2.93 * 10<sup>6</sup></td><td align="center">1.85 * 10<sup>-3</sup></td><td align="center">650 (all)</td><td align="center">1</td></tr></tbody></table><table-wrap-foot><p>Similarity search results obtained on reduced alphabets. The number of positions tested (validating Stage 1 only and independent from the chosen alphabet) is 1.59 * 10<sup>9</sup>. The practical selectivity is computed dividing the number of positions validating both Stage 1 and Stage 2 by the number of positions tested.</p></table-wrap-foot></table-wrap><table-wrap position="float" id="T9"><label>Table 9</label><caption><p>Practical results for different alphabets &#x02013; Memory requirements</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="center">alphabet</td><td align="center">&#x003b1;</td><td align="center"><italic>L</italic></td><td align="center"><italic>S</italic><sub>neighborhood</sub></td><td align="center"><italic>r</italic></td></tr></thead><tbody><tr><td align="center">&#x003a3;<sub>20</sub></td><td align="center">5</td><td align="center">11</td><td align="center">1.70 * 10<sup>9 </sup>bits = 212 MBytes</td><td align="center">5.58</td></tr><tr><td align="center">&#x003a3;<sub>16</sub></td><td align="center">4</td><td align="center">12</td><td align="center">1.52 * 10<sup>9 </sup>bits = 190 MBytes</td><td align="center">5.00</td></tr><tr><td align="center">&#x003a3;<sub>8</sub></td><td align="center">3</td><td align="center">14</td><td align="center">1.37 * 10<sup>9 </sup>bits = 171 MBytes</td><td align="center">4.50</td></tr><tr><td align="center">&#x003a3;<sub>4</sub></td><td align="center">2</td><td align="center">19</td><td align="center">1.27 * 10<sup>9 </sup>bits = 159 MBytes</td><td align="center">4.17</td></tr><tr><td align="center">&#x003a3;<sub>2</sub></td><td align="center">1</td><td align="center">32</td><td align="center">1.12 * 10<sup>9 </sup>bits = 140 MBytes</td><td align="center">3.67</td></tr></tbody></table><table-wrap-foot><p>Database index size for neighborhood indexing on different alphabets. The first three columns are the same as in Table <xref ref-type="table" rid="T2">2</xref>, the other two columns refer to the experience described in section "Practical results". The index size is equal to <italic>N </italic>&#x000d7; (&#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; + 2<italic>&#x003b1;L</italic>), as explained in the beginning of the paper. Here <italic>N </italic>= 12 700 507 and &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; = 24. The ratio <italic>r </italic>is against the size of the index for offset indexing, which is here <italic>S</italic><sub>offset </sub>= <italic>N </italic>&#x000d7; &#x02308;log<sub>2 </sub><italic>N</italic>&#x02309; = 0.30 * 10<sup>9 </sup>bits = 38 MBytes.</p></table-wrap-foot></table-wrap><p>As shown in Table <xref ref-type="table" rid="T8">8</xref>, each of the reduced alphabets yields a practical full sensitivity, as all the 650 alignments are found in each test. Moreover, the practical selectivity, close to 10<sup>-3</sup>, is here better than the theoretical one (0.01).</p></sec></sec><sec><title>Conclusion</title><p>We proposed a method for reducing the index size when storing neighborhoods of seed keys in protein databases. This approach is based on reducing the alphabet of indexed data while using a longer neighborhood. We save 35% of the index size without any modification on the result quality assuming an ungapped alignment model. We provided optimal lengths for selected alphabets.</p><p>Furthermore, the proposed method requires unusual substitutions score matrices that are called R<sc>E</sc>B<sc>LOSUM</sc>, for rectangular B<sc>LOSUM</sc> matrices. These matrices provide substitution scores between letters from different alphabets. We extended the computation of traditional B<sc>LOSUM</sc> matrices in order to compute R<sc>E</sc>B<sc>LOSUM</sc> matrices, and adapted the computation of <italic>&#x003bb; </italic>and <italic>K </italic>parameters for <italic>e</italic>-value estimation to reduced alphabets. We provided R<sc>E</sc>B<sc>LOSUM</sc> matrices and their corresponding <italic>&#x003bb; </italic>and <italic>K </italic>values for selected alphabets. Other matrices and parameters can be obtained from the website [<xref ref-type="bibr" rid="B17">17</xref>].</p></sec><sec sec-type="methods"><title>Methods</title><p>In this section, we describe the methods we used to compute the sensitivity and selectivity of similarity search on reduced alphabets as well as the neighborhood length. We further describe the computation of R<sc>E</sc>B<sc>LOSUM</sc> substitution score matrices and of the <italic>e</italic>-value parameter. Moreover, we explain how the threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M9" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> is computed at Stage 2 depending on the <italic>e</italic>-value specified by the user. Finally, we describe how we estimated the time gain of the the neighborhood indexing over the offset indexing.</p><sec><title>Selectivity and sensitivity computation</title><p>The sensitivity of Stage 2 is defined by the ratio of retained "true alignments" (a "true alignment" is an alignment known to be relevant, according to a model or to a reference set like the B<sc>LOCKS</sc> database):</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M10" name="1471-2105-9-534-i4" overflow="scroll"><mml:semantics><mml:mrow><mml:mtext>sensitivity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mtext>#&#x000a0;successfully&#x000a0;extended&#x000a0;true&#x000a0;alignments</mml:mtext></mml:mrow><mml:mrow><mml:mtext>#&#x000a0;true&#x000a0;alignments</mml:mtext></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>The selectivity is defined as the ratio of retained "random alignments" (a "random alignment" means an alignment of randomly chosen amino acid pairs drawn according to an appropriate probability distribution):</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M11" name="1471-2105-9-534-i5" overflow="scroll"><mml:semantics><mml:mrow><mml:mtext>selectivity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mtext>#&#x000a0;successfully&#x000a0;extended&#x000a0;random&#x000a0;alignments</mml:mtext></mml:mrow><mml:mrow><mml:mtext>#&#x000a0;random&#x000a0;alignments</mml:mtext></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>Note that here we focus on the behavior of Stage 2 and do not take into consideration the sensitivity/selectivity of Stage 1. In particular, in the above fractions we consider only alignments that extend a hit presumably reported at Stage 1.</p><p>The sensitivity and the selectivity of Stage 2 rely on three parameters: the alphabet choice, the neighborhood length, and the score threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M12" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula>. Given these three parameters, we applied a dynamic programming algorithm to compute the probability for the filter to retain an alignment drawn according to a given <italic>amino acid pair distribution</italic>. Applied to distributions of "true" and "random" alignments (foreground and background distributions, respectively), the algorithm gives a theoretical estimation of the sensitivity and the selectivity of the filter. The two distributions were the Bernoulli models (namely the expected and the observed probabilities, see below), obtained with the B<sc>LOSUM</sc> programs on the B<sc>LOCKS</sc> protein database when processing the B<sc>LOSUM</sc>-62 matrix.</p><p>In our Algorithm 1, two neighborhoods (left and right) are processed. We thus consider the sum of two maximal scores, reached in the left and right neighborhoods. The probability that this sum reaches a given threshold <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M13" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> at least once is computed as follows. First, we compute the probability for each neighborhood independently to reach <italic>any </italic>given maximal score <italic>s </italic>(<italic>s </italic>&#x02265; 0) within the neighborhood length. Then, these two independent discrete distributions are combined to compute the <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M14" name="1471-2105-9-534-i1" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">T</mml:mi></mml:semantics></mml:math></inline-formula> threshold requirement.</p><p>For our experiments, we calibrated the neighborhoods lengths to have a sensibility close to 0.95 and a selectivity close to 0.01, and computed related thresholds values (available of the R<sc>E</sc>B<sc>LOSUM</sc> website).</p></sec><sec><title>Computing R<sc>E</sc>B<sc>LOSUM</sc> matrices</title><p>There are several substitution score matrices for the regular &#x003a3;<sub>20 </sub>&#x000d7; &#x003a3;<sub>20 </sub>alphabet, and the most common of them are matrices from the B<sc>LOSUM</sc> family [<xref ref-type="bibr" rid="B22">22</xref>] (BLOcks SUbstitution Matrix). They are built from the B<sc>LOCKS</sc> database of ungapped multiple alignments [<xref ref-type="bibr" rid="B23">23</xref>]. For a given identity level X and two amino acids <italic>i </italic>and <italic>j</italic>, the B<sc>LOSUM</sc>X score <italic>B</italic><sub><italic>i</italic>, <italic>j </italic></sub>are log-likelihoods of <italic>amino acid pair frequencies</italic>:</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M15" name="1471-2105-9-534-i6" overflow="scroll"><mml:semantics><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>log</mml:mi><mml:mo>&#x02061;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mi>q</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&#x022c5;</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>where <italic>p</italic><sub><italic>i</italic></sub>&#x000b7; <italic>p</italic><sub><italic>j </italic></sub>is the <italic>expected </italic>probability of aligning <italic>i </italic>against <italic>j</italic>, and <italic>q</italic><sub><italic>i</italic>, <italic>j </italic></sub>is the <italic>observed </italic>probability of the same event in a subset of alignments of the B<sc>LOCKS</sc> database that have at least &#x000d7; percent of identity. (Note that the computation of <italic>q</italic><sub><italic>i</italic>, <italic>j </italic></sub>takes into account different contributions provided by alignments with different identity levels.)</p><p>In our case, sequences over diferent alphabets are compared and we then have to adapt the matrix computation to compute appropriate rectangular matrices. For this purpose, the original data file (B<sc>LOCKS</sc> database version 5) was downloaded and the original programs of [<xref ref-type="bibr" rid="B18">18</xref>] (downloaded from [<xref ref-type="bibr" rid="B24">24</xref>]) were modified in order to take into account the reduced alphabet on "one side" of the matrix and compute new log-likelihood scores. Given two alphabets &#x003a3; and &#x003a3;', we compute such matrices for several identity levels X, using the log-likelihood of <italic>groups of amino acid pair frequencies</italic>:</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M16" name="1471-2105-9-534-i7" overflow="scroll"><mml:semantics><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mrow><mml:mi>I</mml:mi><mml:mo>,</mml:mo><mml:mi>J</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>log</mml:mi><mml:mo>&#x02061;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mi>q</mml:mi><mml:mrow><mml:mi>I</mml:mi><mml:mo>,</mml:mo><mml:mi>J</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>&#x022c5;</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>J</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:semantics></mml:math></disp-formula></p><p>where <italic>p</italic><sub><italic>I</italic></sub>&#x000b7;<italic>p</italic><sub><italic>J </italic></sub>is the <italic>expected </italic>frequency of aligning any amino acids from group <italic>I </italic>&#x02286; &#x003a3; against any other amino acid from group <italic>J </italic>&#x02286; &#x003a3;', and <italic>q</italic><sub><italic>I</italic>, <italic>J </italic></sub>is the <italic>observed </italic>frequency of the same event in a subset of alignments of the B<sc>LOCKS</sc> database that have at least &#x000d7; percent of identity. The recent paper [<xref ref-type="bibr" rid="B25">25</xref>] discovered flaws in the original B<sc>LOSUM</sc> implementation, but shows that a corrected program does not improve (and even in some cases decreases) the results quality. Therefore, we did not take the proposed modifications into account.</p><p>The website [<xref ref-type="bibr" rid="B17">17</xref>] proposes a selection of R<sc>E</sc>B<sc>LOSUM</sc> matrices for several alphabets, as well as an interface to compute R<sc>E</sc>B<sc>LOSUM</sc> matrices for any alphabet and identity level specified by the user.</p></sec><sec><title>Prototype for estimating the time gain of offset indexing over neighborhood indexing</title><p>For comparing the execution time between offset indexing and neighborhood indexing, a <inline-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M17" name="1471-2105-9-534-i8" overflow="scroll"><mml:semantics><mml:mi mathvariant="script">C</mml:mi></mml:semantics></mml:math></inline-formula> prototype was created. In the case of the offset indexing, the index stores positions of all seeds in an unique integer array. For each seed key, a pointer provides the first occurrence in this array. In the case of the neighborhood indexing, the index uses a (unique) structure array instead of an integer array. For each key occurrence, the structure contains the key position together with two neighborhoods.</p><p>Tests reported in Figure <xref ref-type="fig" rid="F4">4</xref> were run on a 2 GHz PC with an AMD Opteron processor. The database size was selected so that the index fits into the main memory (4 GB) but not into the L1/L2 cache (1 MB). In those tests, the neighborhood indexing performs almost twice as fast as the offset indexing.</p></sec></sec><sec><title>Authors' contributions</title><p>All authors conceived the study. VHN created and tested the prototype estimating the time gain using a neighborhood index. LN and MG computed R<sc>E</sc>B<sc>LOSUM</sc> matrices and optimal neighborhood lengths using different alphabets and created the web interface. PP performed tests on biological sequences and drafted the manuscript. DL and GK proposed the setup of the work and participated in its coordination. All authors read and approved the final manuscript.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>This work was supported by the INRIA ARC grant "Flash" (<italic>Seed Optimization and Indexing of Genomic Databases</italic>).</p></sec></ack><ref-list><ref id="B1"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>T</given-names></name><name><surname>Waterman</surname><given-names>M</given-names></name></person-group><article-title>Identification of common molecular subsequences</article-title><source>Journal of Molecular Biology</source><year>1981</year><volume>147</volume><pub-id pub-id-type="pmid">7265238</pub-id></citation></ref><ref id="B2"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Crochemore</surname><given-names>M</given-names></name><name><surname>Landau</surname><given-names>G</given-names></name><name><surname>Ziv-Ukelson</surname><given-names>M</given-names></name></person-group><article-title>A Sub-quadratic Sequence Alignment Algorithm for Unrestricted Cost Matrices</article-title><source>Symposium On Discrete Algorithms (SODA 02)</source><year>2002</year><fpage>679</fpage><lpage>688</lpage></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lipman</surname><given-names>D</given-names></name><name><surname>Pearson</surname><given-names>W</given-names></name></person-group><article-title>Improved tools for biological sequence comparison</article-title><source>Proc Natl Acad Sci USA</source><year>1988</year><volume>85</volume><fpage>2444</fpage><lpage>2448</lpage><pub-id pub-id-type="pmid">3162770</pub-id><pub-id pub-id-type="doi">10.1073/pnas.85.8.2444</pub-id></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>S</given-names></name><name><surname>Gish</surname><given-names>W</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Myers</surname><given-names>W</given-names></name><name><surname>Lipman</surname><given-names>D</given-names></name></person-group><article-title>Basic local alignment search tool</article-title><source>Journal of Molecular Biology</source><year>1990</year><volume>215</volume><fpage>403</fpage><lpage>410</lpage><pub-id pub-id-type="pmid">2231712</pub-id></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>S</given-names></name><name><surname>Madden</surname><given-names>T</given-names></name><name><surname>Sch&#x000e4;ffer</surname><given-names>A</given-names></name><name><surname>Zhang</surname><given-names>J</given-names></name><name><surname>Zhang</surname><given-names>Z</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Lipman</surname><given-names>D</given-names></name></person-group><article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title><source>Nucleic Acids Research</source><year>1997</year><volume>25</volume><fpage>3389</fpage><lpage>3402</lpage><pub-id pub-id-type="pmid">9254694</pub-id><pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>M</given-names></name><name><surname>Ma</surname><given-names>B</given-names></name><name><surname>Kisman</surname><given-names>D</given-names></name><name><surname>Tromp</surname><given-names>J</given-names></name></person-group><article-title>PatternHunter II: Highly Sensitive and Fast Homology Search</article-title><source>Journal of Bioinformatics and Computational Biology</source><year>2004</year><volume>2</volume><fpage>417</fpage><lpage>439</lpage><comment>[(early version in GIW 2003)].</comment><pub-id pub-id-type="pmid">15359419</pub-id><pub-id pub-id-type="doi">10.1142/S0219720004000661</pub-id></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>No&#x000e9;</surname><given-names>L</given-names></name><name><surname>Kucherov</surname><given-names>G</given-names></name></person-group><article-title>YASS: enhancing the sensitivity of DNA similarity search</article-title><source>Nucleic Acids Research</source><year>2005</year><volume>33</volume><fpage>W540</fpage><lpage>W543</lpage><pub-id pub-id-type="pmid">15980530</pub-id><pub-id pub-id-type="doi">10.1093/nar/gki478</pub-id></citation></ref><ref id="B8"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Brown</surname><given-names>DG</given-names></name></person-group><article-title>Bioinformatics Algorithms: Techniques and Applications</article-title><source>A survey of seeding for sequence alignment</source><year>2008</year><publisher-name>Wiley-Interscience (I. Mandoiu, A. Zelikovsky)</publisher-name><fpage>126</fpage><lpage>152</lpage></citation></ref><ref id="B9"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Peterlongo</surname><given-names>P</given-names></name><name><surname>No&#x000e9;</surname><given-names>L</given-names></name><name><surname>Lavenier</surname><given-names>D</given-names></name><name><surname>Georges</surname><given-names>G</given-names></name><name><surname>Jacques</surname><given-names>J</given-names></name><name><surname>Kucherov</surname><given-names>G</given-names></name><name><surname>Giraud</surname><given-names>M</given-names></name></person-group><article-title>Protein similarity search with subset seeds on a dedicated reconfigurable hardware</article-title><source>Parallel Biocomputing Conference (PBC 07), Volume 4967 of Lecture Notes in Computer Science (LNCS)</source><year>2007</year></citation></ref><ref id="B10"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Nguyen</surname><given-names>VH</given-names></name><name><surname>Lavenier</surname><given-names>D</given-names></name></person-group><article-title>Speeding up Subset Seed Algorithm for Intensive Protein Sequence Comparison</article-title><source>6th International Conference on research, innovation and vision for the future</source><year>2008</year></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kent</surname><given-names>WJ</given-names></name></person-group><article-title>BLAT-the BLAST-like alignment tool</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>656</fpage><lpage>664</lpage><pub-id pub-id-type="pmid">11932250</pub-id></citation></ref><ref id="B12"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Hennessy</surname><given-names>JL</given-names></name><name><surname>Patterson</surname><given-names>DA</given-names></name></person-group><source>Computer Architecture, A Quantitative Approach</source><year>2006</year><publisher-name>Morgan Kaufmann</publisher-name></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Murphy</surname><given-names>L</given-names></name><name><surname>Wallqvist</surname><given-names>A</given-names></name><name><surname>Ronald</surname><given-names>L</given-names></name></person-group><article-title>Simplified amino acid alphabets for protein fold recognition and implications for folding</article-title><source>Protein Engineering</source><year>2000</year><volume>13</volume><fpage>149</fpage><lpage>152</lpage><pub-id pub-id-type="pmid">10775656</pub-id><pub-id pub-id-type="doi">10.1093/protein/13.3.149</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Cannata</surname><given-names>N</given-names></name><name><surname>Toppo</surname><given-names>S</given-names></name><name><surname>Romualdi</surname><given-names>C</given-names></name><name><surname>Valle</surname><given-names>G</given-names></name></person-group><article-title>Simplifying amino acid alphabets by means of a branch and algorithm and substitution matrices</article-title><source>Bioinformatic</source><year>2002</year><volume>18</volume><fpage>1102</fpage><lpage>1108</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/18.8.1102</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>T</given-names></name><name><surname>Fan</surname><given-names>K</given-names></name><name><surname>Wang</surname><given-names>J</given-names></name><name><surname>Wang</surname><given-names>W</given-names></name></person-group><article-title>Reduction of protein sequence complexity by residue grouping</article-title><source>Protein Engineering</source><year>2003</year><volume>16</volume><fpage>323</fpage><lpage>330</lpage><pub-id pub-id-type="pmid">12826723</pub-id><pub-id pub-id-type="doi">10.1093/protein/gzg044</pub-id></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Edgar</surname><given-names>R</given-names></name></person-group><article-title>Local homology recognition and distance measures in linear time using compressed amino acid alphabets</article-title><source>Nucleic Acids Research</source><year>2004</year><volume>32</volume><fpage>380</fpage><lpage>385</lpage><pub-id pub-id-type="pmid">14729922</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkh180</pub-id></citation></ref><ref id="B17"><citation citation-type="other"><article-title>ReBLOSUM:: Rectangular BLOSUM Matrices</article-title><ext-link ext-link-type="uri" xlink:href="http://bioinfo.lifl.fr/reblosum/"/></citation></ref><ref id="B18"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Henikoff</surname><given-names>J</given-names></name><name><surname>Henikoff</surname><given-names>S</given-names></name></person-group><article-title>Amino Acid Substitution Matrices form Protein Blocks</article-title><source>Proc Natl Acad Sci USA</source><year>1992</year><volume>89</volume><fpage>10915</fpage><lpage>10919</lpage><pub-id pub-id-type="pmid">1438297</pub-id><pub-id pub-id-type="doi">10.1073/pnas.89.22.10915</pub-id></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Karlin</surname><given-names>S</given-names></name><name><surname>Altschul</surname><given-names>SF</given-names></name></person-group><article-title>Methods for assessing the statistical significance of molecular sequence features by using general scoring schemes</article-title><source>Proc Natl Acad Sci USA</source><year>1990</year><volume>87</volume><fpage>2264</fpage><lpage>2268</lpage><pub-id pub-id-type="pmid">2315319</pub-id><pub-id pub-id-type="doi">10.1073/pnas.87.6.2264</pub-id></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Lipman</surname><given-names>D</given-names></name><name><surname>Pearson</surname><given-names>W</given-names></name></person-group><article-title>Rapid and Sensitive Protein Similarity Searches</article-title><source>Science</source><year>1985</year><volume>227</volume><fpage>1435</fpage><lpage>1441</lpage><pub-id pub-id-type="pmid">2983426</pub-id><pub-id pub-id-type="doi">10.1126/science.2983426</pub-id></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Roytberg</surname><given-names>M</given-names></name><name><surname>Gambin</surname><given-names>A</given-names></name><name><surname>No&#x000e9;</surname><given-names>L</given-names></name><name><surname>Lasota</surname><given-names>S</given-names></name><name><surname>Furletova</surname><given-names>E</given-names></name><name><surname>Szczurek</surname><given-names>E</given-names></name><name><surname>Kucherov</surname><given-names>G</given-names></name></person-group><article-title>Efficient seeding techniques for protein similarity search</article-title><source>Bioinformatics Research and Development, Proceedings of the 2nd International Conference BIRD 2008, Vienna (Austria), July 7&#x02013;9, 2008, of Communications in Computer and Information Science, Springer Verlag</source><year>2008</year><volume>13</volume><fpage>466</fpage><lpage>478</lpage></citation></ref><ref id="B22"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Henikoff</surname><given-names>S</given-names></name><name><surname>Henikoff</surname><given-names>J</given-names></name></person-group><article-title>Amino acid substitution matrices from protein blocks</article-title><source>Proc Natl Acad Sci USA</source><year>1992</year><volume>89</volume><fpage>10915</fpage><lpage>10919</lpage><pub-id pub-id-type="pmid">1438297</pub-id><pub-id pub-id-type="doi">10.1073/pnas.89.22.10915</pub-id></citation></ref><ref id="B23"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Henikoff</surname><given-names>S</given-names></name><name><surname>Henikoff</surname><given-names>J</given-names></name></person-group><article-title>Automated assembly of protein blocks for database searching</article-title><source>Nucleic Acids Res</source><year>1991</year><volume>19</volume><fpage>6565</fpage><lpage>6572</lpage><pub-id pub-id-type="pmid">1754394</pub-id><pub-id pub-id-type="doi">10.1093/nar/19.23.6565</pub-id></citation></ref><ref id="B24"><citation citation-type="other"><article-title>Blosum database</article-title><ext-link ext-link-type="uri" xlink:href="http://sci.cnb.uam.es/Services/ftp/databases/blocks/unix/blosum/"/></citation></ref><ref id="B25"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Styczynski</surname><given-names>MP</given-names></name><name><surname>Jensen</surname><given-names>KL</given-names></name><name><surname>Rigoutsos</surname><given-names>I</given-names></name><name><surname>Stephanopoulos</surname><given-names>G</given-names></name></person-group><article-title>BLOSUM62 miscalculations improve search performance</article-title><source>Nat Biotech</source><year>2008</year><volume>26</volume><fpage>274</fpage><lpage>275</lpage><pub-id pub-id-type="doi">10.1038/nbt0308-274</pub-id></citation></ref></ref-list></back></article>