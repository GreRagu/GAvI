<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd"><article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="product-review"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Chem Cent J</journal-id><journal-title>Chemistry Central Journal</journal-title><issn pub-type="epub">1752-153X</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">19055766</article-id><article-id pub-id-type="pmc">2646723</article-id><article-id pub-id-type="publisher-id">1752-153X-2-24</article-id><article-id pub-id-type="doi">10.1186/1752-153X-2-24</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>Cinfony &#x02013; combining Open Source cheminformatics toolkits behind a common interface</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>O'Boyle</surname><given-names>Noel M</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>oboyle@ccdc.cam.ac.uk</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Hutchison</surname><given-names>Geoffrey R</given-names></name><xref ref-type="aff" rid="I2">2</xref><email>geoffh@pitt.edu</email></contrib></contrib-group><aff id="I1"><label>1</label>Cambridge Crystallographic Data Centre, 12 Union Road, Cambridge CB2 1EZ, UK</aff><aff id="I2"><label>2</label>Department of Chemistry, University of Pittsburgh, Chevron Science Center, 219 Parkman Avenue, Pittsburgh, PA 15260, USA</aff><pub-date pub-type="collection"><year>2008</year></pub-date><pub-date pub-type="epub"><day>3</day><month>12</month><year>2008</year></pub-date><volume>2</volume><fpage>24</fpage><lpage>24</lpage><ext-link ext-link-type="uri" xlink:href="http://journal.chemistrycentral.com/content/2/1/24"/><history><date date-type="received"><day>9</day><month>10</month><year>2008</year></date><date date-type="accepted"><day>3</day><month>12</month><year>2008</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2008 O'Boyle et al</copyright-statement><copyright-year>2008</copyright-year><copyright-holder>O'Boyle et al</copyright-holder></permissions><abstract><sec><title>Background</title><p>Open Source cheminformatics toolkits such as OpenBabel, the CDK and the RDKit share the same core functionality but support different sets of file formats and forcefields, and calculate different fingerprints and descriptors. Despite their complementary features, using these toolkits in the same program is difficult as they are implemented in different languages (C++ versus Java), have different underlying chemical models and have different application programming interfaces (APIs).</p></sec><sec><title>Results</title><p>We describe Cinfony, a Python module that presents a common interface to all three of these toolkits, allowing the user to easily combine methods and results from any of the toolkits. In general, the run time of the Cinfony modules is almost as fast as accessing the underlying toolkits directly from C++ or Java, but Cinfony makes it much easier to carry out common tasks in cheminformatics such as reading file formats and calculating descriptors.</p></sec><sec><title>Conclusion</title><p>By providing a simplified interface and improving interoperability, Cinfony makes it easy to combine complementary features of OpenBabel, the CDK and the RDKit.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>Cheminformatics toolkits are essential to the day-to-day work of the practising cheminformatician. They enable the user to deal with such tasks as handling different chemistry file formats, substructure searching, calculation of molecular fingerprints, and structure diagram generation. The main Open Source cheminformatics libraries under active development are OpenBabel [<xref ref-type="bibr" rid="B1">1</xref>], the Chemistry Development Kit (CDK) [<xref ref-type="bibr" rid="B2">2</xref>], and the RDKit [<xref ref-type="bibr" rid="B3">3</xref>]. OpenBabel is a C++ toolkit with bindings in Perl, Python, Ruby and Java, the CDK is a Java toolkit, while the RDKit is another C++ toolkit with Python bindings. While the CDK has its origins in academia, both OpenBabel and the RDKit originated in companies (OpenEye and Rational Discovery, respectively) and have subsequently been developed by the community under Open Source licenses.</p><p>In general, all of these toolkits share the same core functionality although the implementation details and underlying chemical model may differ. However, as a result of their independent development and history, each has functionality specific to itself and each toolkit supports different sets of file formats and forcefields, and can calculate different molecular fingerprints and molecular descriptors (Table <xref ref-type="table" rid="T1">1</xref>). Despite the diversity of these toolkits and the potential benefits in being able to access all of them at the same time, there has been little work on interoperability between them. This has resulted in a balkanization of this field such that users of one toolkit rarely use another toolkit.</p><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Some features of toolkits which are not shared by all three toolkits.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left"><bold>CDK</bold></td></tr><tr><td align="left">A large number of descriptors (some overlap with RDKit)</td></tr><tr><td align="left">Pharmacophore searching (like RDKit*)</td></tr><tr><td align="left">Calculation of maximum common substructure</td></tr><tr><td align="left">2D structure layout (like RDKit) and depiction</td></tr><tr><td align="left">MACCS keys (also RDKit) and E-State fingerprints</td></tr><tr><td align="left">Integration with the R statistical programming environment</td></tr><tr><td align="left">Support for mass-spectrometry analysis (representations for cleavage reactions, structure generation from formulae)</td></tr><tr><td align="left">Fragmentation schemes (ring fragments, Murcko)</td></tr><tr><td align="left">3D structure generation using a template and heuristics (like OpenBabel)</td></tr><tr><td align="left">3D similarity using ultrafast shape descriptors</td></tr><tr><td align="left">Gasteiger &#x003c0; charge calculation</td></tr></thead><tbody><tr><td align="left"><bold>OpenBabel</bold></td></tr><tr><td align="left">Not just focused on cheminformatics</td></tr><tr><td align="left">Supports a very large number of chemical file formats including quantum mechanics file formats, molecular mechanics trajectories, 2D sketchers</td></tr><tr><td align="left">3D structure generation using a template method (like CDK)</td></tr><tr><td align="left">Included in all major Linux distributions</td></tr><tr><td align="left">Bindings available from several scripting languages apart from Python, as well as the Java and .NET platforms</td></tr><tr><td align="left">Conformation generation and searching</td></tr><tr><td align="left">InChI (also CDK) and InChIKey generation</td></tr><tr><td align="left">Support for crystallographic space groups</td></tr><tr><td align="left">Several forcefield implementations: UFF (also RDKit), MMFF94, MMFF94s, Ghemical</td></tr><tr><td align="left">Ability to add custom data types to atoms, bonds, residues, molecules</td></tr><tr><td colspan="1"><hr></hr></td></tr><tr><td align="left"><bold>RDKit</bold></td></tr><tr><td align="left">A large number of descriptors (some overlap with CDK)</td></tr><tr><td align="left">Fragmentation using RECAP rules</td></tr><tr><td align="left">2D coordinate generation (like CDK) and depiction</td></tr><tr><td align="left">3D coordinate generation using geometry embedding</td></tr><tr><td align="left">Calculation of Cahn-Ingold-Prelog stereochemistry codes (R/S)</td></tr><tr><td align="left">Pharmacophore searching (like CDK)</td></tr><tr><td align="left">Calculation of shape similarity (based on volume overlap)</td></tr><tr><td align="left">Chemical reaction handling and transforms</td></tr><tr><td align="left">Atom pairs and topological torsions fingerprints</td></tr><tr><td align="left">Feature maps and feature-map vectors</td></tr><tr><td align="left">Machine-learning algorithms</td></tr></tbody></table><table-wrap-foot><p>* Where the term "like" is used, it indicates that the implementation details differ.</p></table-wrap-foot></table-wrap><p>One way to achieve interoperability of chemical toolkits is through the use of standard file formats for exchange of data. For example, the CML project has defined a standardised XML format for chemical data [<xref ref-type="bibr" rid="B4">4</xref>], with successive releases refining and extending the original standard. The OpenSMILES effort [<xref ref-type="bibr" rid="B5">5</xref>] has attempted to resolve ambiguities in the published SMILES definition [<xref ref-type="bibr" rid="B6">6</xref>] to create a standard. While these efforts deserve support, they face inevitable problems achieving consensus and they require changes to existing software to support the standard. The large number of chemical file formats supported by OpenBabel (currently over 80) illustrates both the potential of achieving a standard as well as the difficulties.</p><p>An alternative is interoperability at the API (application programming interface) level. This has the advantage that it does require any changes to existing software. However, there are at least three barriers to overcome: the need for a programming language that can access all the toolkits simultaneously, the difficulty of exchanging chemical models between different toolkits, and differences in the API for core cheminformatics tasks shared by the toolkits.</p><p>Here we describe Cinfony, a Python module that overcomes these barriers to provide interoperability at the API level. Cinfony allows access to OpenBabel, the CDK, and the RDKit through a common interface, and uses a simple yet robust method to pass chemical models between toolkits. Pybel, one of the components of Cinfony, has been described previously [<xref ref-type="bibr" rid="B7">7</xref>]. It provides access to OpenBabel from standard Python. In this work, we show that the API developed for Pybel may be considered a generic API for accessing any cheminformatics toolkit. We describe the design and implementation of the Cinfony API for OpenBabel, the RDKit and the CDK. Next, we show how Cinfony simplifies the process of accessing the toolkits and how it can be used in practice to combine the power of the three Open Source toolkits. Finally, we discuss performance and some results from comparisons of the toolkits.</p></sec><sec><title>Implementation</title><sec><title>Common Application Programming Interface</title><p>Cinfony presents the same interface to three cheminformatics toolkits, OpenBabel, the CDK and the RDKit. These are available through three separate modules: <italic>obabel</italic>, <italic>cdk </italic>and <italic>rdkit</italic>. The API is designed to make it easy to carry out many of the common tasks in cheminformatics, and covers the core functionality shared by all of the toolkits. Table <xref ref-type="table" rid="T2">2</xref> gives an overview of the API. The complete API is available here (see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>).</p><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>An overview of the Cinfony API.</p></caption><table frame="hsides" rules="groups"><thead><tr><td align="left"><bold>Class name</bold></td><td align="left"><bold>Purpose</bold></td></tr></thead><tbody><tr><td align="left">Molecule</td><td align="left">Wraps a molecule instance of the underlying toolkit and provides access to methods that act on molecules</td></tr><tr><td align="left">Atom</td><td align="left">Wraps an atom instance of the underlying toolkit</td></tr><tr><td align="left">MoleculeData</td><td align="left">Provides dictionary-like access to the information contained in the tag fields in SDF and MOL2 files</td></tr><tr><td align="left">Outputfile</td><td align="left">Handles multimolecule output file formats</td></tr><tr><td align="left">Smarts</td><td align="left">Wraps the SMARTS functionality of the toolkit in an analogous way to the Python 're' module for regular expression matching</td></tr><tr><td align="left">Fingerprint</td><td align="left">Simplifies Tanimoto calculation of binary fingerprints</td></tr><tr><td colspan="2"><hr></hr></td></tr><tr><td align="left"><bold>Function name</bold></td><td></td></tr><tr><td align="left">readfile</td><td align="left">Return an iterator over Molecules in a file</td></tr><tr><td align="left">readstring</td><td align="left">Return a Molecule</td></tr><tr><td colspan="2"><hr></hr></td></tr><tr><td align="left"><bold>Variable name</bold></td><td></td></tr><tr><td align="left">descs</td><td align="left">A list of descriptor IDs</td></tr><tr><td align="left">forcefields</td><td align="left">A list of forcefield IDs</td></tr><tr><td align="left">fps</td><td align="left">A list of fingerprint IDs</td></tr><tr><td align="left">informatsaa</td><td align="left">A list of input format IDs</td></tr><tr><td align="left">outformats</td><td align="left">A list of output format IDs</td></tr></tbody></table></table-wrap><p>The main class containing chemical information is the Molecule class. Rather than create a new chemical model, the Molecule class is a light wrapper around the molecule object in the underlying library, for example, around OBMol in the case of OpenBabel. Attribute values such as the molecular weight are calculated dynamically by querying the underlying molecule. This ensures that if the underlying OBMol, for example, is altered, the attribute values returned will still be correct. The actual underlying object (an OpenBabel OBMol, a CDK Molecule, or an RDKit Mol) can be accessed directly at any point.</p><p>The Molecule class also contains several methods that act on molecules such as methods for calculating fingerprints, adding hydrogens, and calculating descriptor values. This makes it easy to access these methods, and also brings them to the attention of the user. In the underlying toolkit these methods may not be present as part of the molecule class, and in fact, they can be difficult to find in the toolkit's API. For example, the Cinfony method Molecule.addh() adds explicit hydrogens to the molecule. Although the OBMol of OpenBabel has a corresponding method, OBMol.AddHydrogens(), the RDKit uses a global method, AddHs(Mol), while the CDK requires the user to instantiate a HydrogenAdder object, which can then be used to add hydrogens.</p><p>The Molecule methods described in the original Pybel API [<xref ref-type="bibr" rid="B7">7</xref>] have been extended to handle hydrogen addition and removal, structure diagram generation, assignment of 3D geometry to 0D structures and geometry optimisation using forcefields. Both the CDK and the RDKit are capable of 2D coordinate generation and 2D depiction. However, since OpenBabel currently has neither of these capabilities, a fourth toolkit, OASA, is used by Pybel for this purpose. OASA is a lightweight cheminformatics toolkit implemented in Python [<xref ref-type="bibr" rid="B8">8</xref>].</p><p>A new development in the latest version of OpenBabel is 3D coordinate generation and geometry optimisation using one of a number of forcefields. Since these methods are also available in the RDKit, and are under development in the CDK, two additional methods have been added to the Cinfony Molecule: make3D(), for 3D coordinate generation, and localopt(), for geometry optimisation. Particularly in the case of OpenBabel, these new methods simplify the process of generating 3D coordinates. Compare a single call to make3D() in Cinfony with the following OpenBabel code:</p><p>structuregenerator = openbabel.OBOp.FindType('Gen3D')</p><p>structuregenerator.Do(mol)</p><p>mol.AddHydrogens()</p><p>ff = openbabel.OBForceField.FindType("MMFF94")</p><p>ff.Setup(mol)</p><p>ff.SteepestDescent(50)</p><p>ff.GetCoordinates(mol)</p><p>The Cinfony API is identical for all of the toolkits. However, the values returned by particular API calls are not necessarily standardised across toolkits. This Cinfony design decision is in agreement with the Principle of Least Surprise [<xref ref-type="bibr" rid="B9">9</xref>]; when the user accesses the underlying toolkit directly, they will get the same result as found when using Cinfony. This design decision places the responsibility on the user to become familiar with differences in how the toolkits behave. For example, all of the toolkits allow the calculation of path-based fingerprints. These encode all paths in the molecular graph up to a path length of <italic>P </italic>into a binary vector of length <italic>V</italic>, but the default values for <italic>V </italic>and <italic>P </italic>are different for each toolkit: 1024 and 7 for OpenBabel, 1024 and 8 for the CDK, and 2048 and 7 for RDKit. Although it is possible to alter these parameters for the CDK and the RDKit and so standardise <italic>V </italic>and <italic>P </italic>to 1024 and 7 for all of the toolkits, it is reasonable to assume that the developers of each package have chosen sensible defaults. In addition, the implementation details of each of the fingerprinters would still be different; for example, the RDKit sets four bits when hashing each molecular path, the others set one; OpenBabel does not set any bits for the one-atom fragments, N, C and O.</p></sec><sec><title>Interoperability</title><p>The ability to transfer chemical models between toolkits is essential to the goal of interoperability. However, the internal representation of a molecule is specific to a particular toolkit. For example, as well as the connection table and coordinates (if present), it may include derived data relating to aromaticity, the number of implicit hydrogens on an atom, or stereochemical configuration. Fortunately, the problem of transfer and storage of chemical information has already been solved by the development of molecular file formats, of which over 80 are now supported by OpenBabel. Specifically, the MDL MOL file format [<xref ref-type="bibr" rid="B10">10</xref>] and the SMILES format [<xref ref-type="bibr" rid="B5">5</xref>,<xref ref-type="bibr" rid="B6">6</xref>] are shared by all three toolkits, and are used by Cinfony to exchange information on molecules with 2D or 3D coordinates (MOL file format), and no coordinates (SMILES format), respectively.</p><p>By using existing file formats rather than trying to interconvert the internal models themselves, Cinfony takes advantage of the existing input/output code of each toolkit which is well-tested and mature. In addition, the translation process is transparent to the user. However, the user should be aware of known limitations of particular readers or writers. For example, the SMILES parser in CDK 1.0.3 ignores atom-based stereochemistry and thus that information is lost if a 0D <italic>rdkit </italic>or <italic>obabel </italic>Molecule with atom-based stereochemistry is converted to a <italic>cdk </italic>Molecule.</p><p>Cinfony Molecules are interconverted using the Molecule() constructor. For example, if obabelmol is an <italic>obabel </italic>Molecule, then the corresponding <italic>rdkit </italic>Molecule can be constructed using rdkit.Molecule(pybelmol). This mechanism can also be used to interface Cinfony to other cheminformatics toolkits. The only requirements are that the object passed to the Molecule() constructor needs to have a _cinfony attribute set to True, and an _exchange attribute containing a tuple (0, SMILES string) or (1, MOL file) depending on whether the molecule is 0D or not.</p></sec><sec><title>Implementation</title><p>The Python scripting language has two main implementations. The most widely used implementation is the original reference implementation of Python in C, referred to as CPython when necessary to distinguish it from other implementations. The next most widely used implementation is Jython, an implementation of Python in Java. Although most users of Python do so through CPython, Jython scripts have the advantage of being able to access Java libraries natively. They can also be compiled into Java classes to be used from Java programs. Jython scripts are also useful in contexts where Java is required but it is more convenient to work in Python; for example, to implement a Java web servlet or a node in a Java workflow environment such as KNIME [<xref ref-type="bibr" rid="B11">11</xref>].</p><p>As discussed earlier, one of the barriers to interoperability is the requirement for a programming language that can simultaneously access more than one of the toolkits. From CPython it is possible to use Cinfony modules to connect to OpenBabel (<italic>pybel</italic>), the CDK (<italic>cdkjpype</italic>) and the RDKit (<italic>rdkit</italic>). From Jython, there are modules for OpenBabel (<italic>jybel</italic>) and the CDK (<italic>cdkjython</italic>). Convenience modules <italic>obabel </italic>and <italic>cdk </italic>are provided that automatically import the appropriate OpenBabel or CDK module depending on the Python implementation. The relationship between these Cinfony modules and the underlying cheminformatics libraries is summarised in Figure <xref ref-type="fig" rid="F1">1</xref>.</p><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>Relationship of Cinfony modules to Open Source toolkits</bold>. Python modules are accessible from CPython (green), Jython (pale blue), or both (striped green and pale blue). Java libraries are indicated by dark blue, while C++ libraries are yellow.</p></caption><graphic xlink:href="1752-153X-2-24-1"/></fig><sec><title>pybel and jybel</title><p>OpenBabel provides SWIG [<xref ref-type="bibr" rid="B12">12</xref>] bindings for both CPython and Java (among other languages). <italic>pybel </italic>is a wrapper around the CPython bindings, and has previously been described in detail [<xref ref-type="bibr" rid="B7">7</xref>]. <italic>jybel </italic>is an implementation of the Cinfony API that allows the user to access OpenBabel from Jython using the Java bindings. Despite the fact that <italic>jybel </italic>is used from a Java implementation of Python, and accesses a C++ library through the Java Native Interface (JNI), the <italic>jybel </italic>code differs from <italic>pybel </italic>in very few respects. In Jython, it is not possible to iterate directly over the wrapped STL vectors used by OpenBabel as their Java SWIG bindings do not implement the Iterable interface. Also, the current Jython implementation is 2.2 and does not support generator expressions, which were introduced in Python 2.4. Although both C++ and Python have the concept of a global function or variable, this is not the case in Java. SWIG places such functions, and get/set methods for accessing the variables, in a special class named openbabel. Global constants are placed in another class called openbabelConstants. A convenience module, <italic>obabel</italic>, is provided which automatically imports the appropriate module depending on the Python implementation.</p></sec><sec><title>cdkjpype and cdkjython</title><p>Since Jython runs on top of the Java Virtual Machine (JVM), it can access Java libraries such as the CDK natively. To access Java libraries from CPython, the Python library JPype [<xref ref-type="bibr" rid="B13">13</xref>] is needed. This starts an instance of the JVM and uses the JNI to communicate back and forth. Overall, the differences between the two wrappers are minor. Jython and JPype differ in the syntax used to handle Java exceptions. Also, JPype returns unicode strings from the CDK and these need to be converted to regular strings (otherwise problems arise if they are passed to an OpenBabel method expecting a std::string). The appropriate CDK wrapper, <italic>cdkjpype </italic>or <italic>cdkjython</italic>, will be imported if the user imports the convenience module <italic>cdk</italic>.</p></sec><sec><title>rdkit</title><p>Support for Python scripting has been part of the design of the RDKit from the start. The Python bindings in RDKit were created using Boost.Python [<xref ref-type="bibr" rid="B14">14</xref>], a framework for interfacing Python and C++. The Cinfony module <italic>rdkit </italic>uses these bindings to implement its API. It is currently not possible to access RDKit from Jython. RDKit has only preliminary support for Java bindings; when these are complete, a corresponding module will be added to Cinfony.</p></sec></sec><sec><title>Dependency handling</title><p>A fully-featured installation of Cinfony relies on a large number of open source libraries. In particular, the 2D depiction capabilities introduce dependencies on several graphics libraries which may be problematic to install on a particular platform (Cairo and its Python bindings, Python Imaging Library, AGG and the Python wrapper AggDraw). With this in mind, Cinfony treats all dependencies as optional and only raises an Exception if the user calls a method or imports a module that requires a missing dependency.</p><p>For example, the Python Imaging Library (PIL) is required for displaying a 2D depiction on the screen. If all of the components of cinfony are installed except for PIL, Cinfony works perfectly except that an Exception is raised if the Molecule.draw() method is called with show = True (the default). The image can however be written to a file without problems (show = False, filename = "image.png"). Similarly, if a user is only interested in using the CDK and the RDKit, it is not necessary to install OpenBabel.</p><p>Full installation instructions for Windows, MacOSX and Linux are available from the Cinfony website. It should be noted that for Windows users, there is no need to compile or search for missing libraries as the dependencies are included as binaries in the Cinfony distribution.</p></sec></sec><sec><title>Results</title><sec><title>Cinfony API</title><p>The original Pybel API was designed to make it easy to use OpenBabel to perform the most common tasks in cheminformatics and to do so using idiomatic Python. Subsequently, we realised that the resulting API could be considered a generic API for wrapping the core functionality of any cheminformatics toolkit. Cinfony implements an extended version of the original Pybel API for the CDK and the RDKit, as well as OpenBabel. While the original Pybel was restricted to CPython, Cinfony can also be used from Jython to access the CDK and OpenBabel.</p><p>Cinfony helps cheminformaticians avoid the steep learning curve associated with starting to use a new toolkit. With Cinfony, all of the core functionality of the toolkits can be accessed with the same interface. For example, in Cinfony, a molecule can be created from a SMILES string with:</p><p>mol = toolkit.readstring("smi", SMILESstring)</p><p>RDKit</p><p>mol = Chem.MolFromSmiles(SMILESstring)</p><p>OpenBabel</p><p>mol = openbabel.OBMol()</p><p>obconversion = openbabel.OBConversion()</p><p>obconversion.SetInFormat("smi")</p><p>obconversion.ReadString(mol, SMILESstring)</p><p>CDK</p><p>builder = cdk.DefaultChemObjectBuilder.getInstance()</p><p>sp = cdk.smiles.SmilesParser(builder)</p><p>mol = sp.parseSmiles(SMILESstring)</p><p>The RDKit was designed with Python scripting in mind, and of the three toolkits is the most concise. On the other hand, OpenBabel uses a characteristically C++ approach. An empty molecule is created, and is passed to an OBConversion instance as a container for the molecule read from the SMILES string. The SmilesParser in the CDK requires an instance of an object implementing the IChemObjectBuilder interface.</p><p>Another advantage of a common API is that a script written for one toolkit can easily be modified to use another. As an example, here is a script that selects molecules that are similar to a particular target molecule. This script is taken from the original Pybel paper [<xref ref-type="bibr" rid="B7">7</xref>], but uses the CDK instead of OpenBabel and will run equally well from Jython and CPython. The only differences compared to the original script are that "pybel" has been replaced with "cdk", and the import statement has been changed from "import pybel":</p><p>from cinfony import cdk</p><p>targetmol = cdk.readfile("sdf", "targetmol.sdf").next()</p><p>targetfp = targetmol.calcfp()</p><p>output = cdk.Outputfile("sdf", "similarmols.sdf")</p><p>for mol in cdk.readfile("sdf", "inputfile.sdf"):</p><p>&#x000a0;&#x000a0;&#x000a0;fp = mol.calcfp()</p><p>&#x000a0;&#x000a0;&#x000a0;if fp | targetfp &#x0003e;= 0.7:</p><p>&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;output.write(mol)</p><p>output.close()</p><p>Alternatively, we could just have made a single change to the original script, by replacing the import statement from "import pybel" with "from cinfony import cdk as pybel".</p></sec><sec><title>Using Cinfony to combine toolkits</title><p>Another goal of Cinfony is to make it easy to combine toolkits in the same script. This allows the user to exploit the complementary capabilities of different toolkits (Table <xref ref-type="table" rid="T1">1</xref>). For example, let's suppose the user wants to (1) convert a SMILES string to 3D coordinates with OpenBabel, then (2) create a 2D depiction of that molecule with the RDKit, next (3) calculate descriptors with the CDK, and finally (4) write out an SDF file containing the descriptor values and the 3D coordinates. The full Python script is only seven lines long:</p><p>from cinfony import rdkit, cdk, obabel</p><p>mol = obabel.readstring("smi", "CCC=O")</p><p>mol.make3D()</p><p>rdkit.Molecule(mol).draw(show = False, filename = "aldehyde.png")</p><p>descs = cdk.Molecule(mol).calcdesc()</p><p>mol.data.update(descs)</p><p>mol.write("sdf", filename = "aldehyde.sdf")</p><p>For cheminformaticians interested in developing QSAR or QSPR models, Cinfony can be used to simultaneously calculate descriptors from the RDKit, the CDK and OpenBabel. For example, the following script reads a multiline input file, with each line consisting of a SMILES string followed by a property value. For each molecule, it calculates all of the OpenBabel, RDKit and CDK descriptors (except for CDK's CPSA) and writes out the results as a tab-separated file suitable for reading with the statistical package R [<xref ref-type="bibr" rid="B15">15</xref>]. Note that in this example script, if descriptors share the same name only one is retained. This is the case for the TPSA descriptor in OpenBabel, which is replaced by the RDKit's TPSA descriptor.</p><p>import string</p><p>from cinfony import obabel, cdk, rdkit</p><p># Read in SMILES strings and observed property values</p><p>smiles, propvals = [], []</p><p>for line in open("data.txt"):</p><p>&#x000a0;&#x000a0;&#x000a0;broken = line.rstrip().split()</p><p>&#x000a0;&#x000a0;&#x000a0;smiles.append(broken [0])</p><p>&#x000a0;&#x000a0;&#x000a0;propvals.append(float(broken))</p><p>mols = [obabel.readstring("smi", smile) for smile in smiles]</p><p># Calculate descriptor values using OpenBabel,</p><p># the CDK (apart from 'CPSA') and the RDKit</p><p>cdkdescs = [x for x in cdk.descs if x != 'CPSA']</p><p>descs = []</p><p>for mol in mols:</p><p>&#x000a0;&#x000a0;&#x000a0;d = mol.calcdesc()</p><p>&#x000a0;&#x000a0;&#x000a0;d.update(cdk.Molecule(mol).calcdesc(cdkdescs))</p><p>&#x000a0;&#x000a0;&#x000a0;d.update(rdkit.Molecule(mol).calcdesc())</p><p>&#x000a0;&#x000a0;&#x000a0;descs.append(d)</p><p># Write a file suitable for 'read.table' in R</p><p>outputfile = open("inputforR.txt", "w")</p><p>descnames = sorted(descs [0].keys(), key = string.lower)</p><p>print &#x0003e;&#x0003e; outputfile, "\t".join(["Property"] + descnames)</p><p>for smile, propval, desc in zip(smiles, propvals, descs):</p><p>&#x000a0;&#x000a0;&#x000a0;descvals = [str(desc[descname]) for descname in descnames]</p><p>&#x000a0;&#x000a0;&#x000a0;print &#x0003e;&#x0003e; outputfile, "\t".join([smile, str(propval)] +</p><p>descvals)</p><p>outputfile.close()</p></sec></sec><sec><title>Performance</title><p>Accessing cheminformatics libraries using Cinfony allows the user to rapidly develop scripts that manipulate chemical information. However, there is a small price to be paid. Firstly, there is the cost of moving objects across the interface between Python and the cheminformatics libraries. Secondly, the additional code required by Cinfony to implement a standard API may slow performance further.</p><p>To assess the performance penalty for accessing cheminformatics toolkits using Cinfony rather than directly in the native language, we looked at two simple test cases: (1) iterating over an SDF file containing 25419 molecules, (2) iterating and printing out the molecular weight of each of the molecules. The SDF file used was 3_p0.0.sdf, the first portion of the drug-like subset of the ZINC 7.00 dataset [<xref ref-type="bibr" rid="B16">16</xref>]. The Cinfony scripts, Java and C++ source code are available as Additional file <xref ref-type="supplementary-material" rid="S2">2</xref>. The results are shown in Table <xref ref-type="table" rid="T3">3</xref>.</p><table-wrap position="float" id="T3"><label>Table 3</label><caption><p>Performance of Cinfony modules compared to a native Java or C++ implementation.</p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center" colspan="2"><bold>Iterate over SDF</bold></td><td align="center" colspan="2"><bold>Iterate and calculate molecular weight</bold></td></tr></thead><tbody><tr><td align="left"><bold>CDK</bold></td><td align="right">Time (s)</td><td align="right">Normalised</td><td align="right">Time (s)</td><td align="right">Normalised</td></tr><tr><td align="left">Native Java</td><td align="right">21.2</td><td align="right">1.00</td><td align="right">36.8</td><td align="right">1.00</td></tr><tr><td align="left"><italic>cdkjython</italic></td><td align="right">23.1</td><td align="right">1.09</td><td align="right">41.6</td><td align="right">1.13</td></tr><tr><td align="left"><italic>cdkjpype</italic></td><td align="right">33.0</td><td align="right">1.57</td><td align="right">69.5</td><td align="right">1.89</td></tr><tr><td colspan="5"><hr></hr></td></tr><tr><td align="left"><bold>OpenBabel</bold></td><td></td><td></td><td></td><td></td></tr><tr><td align="left">Native C++</td><td align="right">31.9</td><td align="right">1.00</td><td align="right">43.0</td><td align="right">1.00</td></tr><tr><td align="left"><italic>pybel</italic></td><td align="right">34.1</td><td align="right">1.07</td><td align="right">45.1</td><td align="right">1.05</td></tr><tr><td align="left"><italic>jybel</italic></td><td align="right">38.0</td><td align="right">1.19</td><td align="right">49.6</td><td align="right">1.15</td></tr><tr><td colspan="5"><hr></hr></td></tr><tr><td align="left"><bold>RDKit</bold></td><td></td><td></td><td></td><td></td></tr><tr><td align="left">Native C++</td><td align="right">99.7</td><td align="right">1.00</td><td align="right">100.7</td><td align="right">1.00</td></tr><tr><td align="left"><italic>rdkit</italic></td><td align="right">99.9</td><td align="right">1.00</td><td align="right">101.0</td><td align="right">1.00</td></tr></tbody></table><table-wrap-foot><p>The times reported are wallclock times from the best of three runs on a dual-core Intel Pentium 4 3.2 GHz machine with 1GB RAM.</p></table-wrap-foot></table-wrap><p>While accessing the CDK using Jython is almost as fast as a pure Java implementation, there is a considerable overhead associated with using JPype to access the CDK from CPython (89% slower for the second test case). This overhead is due to passing objects between the JVM and CPython. For OpenBabel, there is little performance cost associated with accessing OpenBabel from either implementation of Python, although the <italic>jybel </italic>scripts are somewhat slower than <italic>pybel </italic>scripts. A small portion of this speed difference can be attributed to a slower startup (about 1.6 seconds for <italic>jybel</italic>, compared to 0.8 seconds for <italic>pybel</italic>). Finally, from the RDKit results in Table <xref ref-type="table" rid="T3">3</xref>, it is clear that using Boost.Python to wrap a C++ library is more efficient than using SWIG. The difference in run times between the C++ and Python implementations is negligible.</p><p>In practice, the performance of a particular Cinfony script will depend on the extent to which information is passed back and forth between Python and the underlying Java or C++ library. Where most of the time is spent on computation in the underlying library, the speed difference between a native implementation and one using Cinfony is expected to be small.</p><sec><title>Comparison of toolkits</title><p>Cinfony makes it easy to compare the results obtained by different toolkits for the same operations. This can be useful in identifying bugs, applying a test suite, or finding the strengths and weaknesses of particular implementations. For example, where different toolkits calculate the same descriptors, if the calculated values are not highly correlated it may indicate a bug in one or the other. Earlier, we mentioned that a difference in the treatment of implicit hydrogens causes different toolkits to give different values for molecular weight unless hydrogens are explicitly added. Ensuring that a particular result is in agreement with that obtained by another toolkit can act as a sanity check in such instances to avoid errors.</p><p>When carrying out the same operation with several toolkits, it is often convenient to iterate over the toolkits in an outer loop:</p><p>from cinfony import obabel, rdkit, cdk</p><p>for toolkit in [obabel, rdkit, cdk]:</p><p>&#x000a0;&#x000a0;&#x000a0;print toolkit.readstring("smi", "CCC").molwt</p><p>As an example of how such comparisons can be used to identify bugs in toolkits, let us consider depiction. As a dataset, we randomly chose 100 molecules from PubChem [<xref ref-type="bibr" rid="B17">17</xref>], with subsequent filtering to remove multicomponent molecules. For each molecule, PubChem provides an SDF file containing coordinates for a 2D depiction, as well as the depiction itself as a PNG file. PubChem uses the CACTVS toolkit [<xref ref-type="bibr" rid="B18">18</xref>] to generate the 2D coordinates as well as the corresponding depiction. Using a script similar to the following, we used Cinfony to generate 2D depictions using OASA (the depiction library used by <italic>pybel</italic>), the CDK and a development version of RDKit that all use the same 2D coordinates taken from the SDF file:</p><p>from cinfony import pybel, rdkit</p><p>for toolkit in [rdkit, pybel]:</p><p>&#x000a0;&#x000a0;&#x000a0;name = toolkit.__name__</p><p>&#x000a0;&#x000a0;&#x000a0;for mol in toolkit.readfile("sdf", "dataset.sdf"):</p><p>&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;mol.draw(filename = "%s_%s.png" % (mol.title, name),</p><p>&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;show = False,</p><p>&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;usecoords = True)</p><p>When the resulting images were compared for the PubChem entry CID7250053, an error was found in the depiction of the stereochemistry of an isopropyl group (Figure <xref ref-type="fig" rid="F2">2</xref>). Since the error only occurred in certain cases, it had not been previously noticed and would have been difficult to identify without such a comparative study. Once reported, the problem was quickly solved and the subsequent RDKit release depicted the stereochemistry correctly. A comparison of depictions by commercial toolkits and depictions generated by Cinfony is available here (see Additional file <xref ref-type="supplementary-material" rid="S3">3</xref>).</p><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>Comparison of depictions of PubChem CID7250053 using different toolkits</bold>. The depiction using the development version of RDKit showed incorrect stereochemistry for the isopropyl substituent of the thiazole ring.</p></caption><graphic xlink:href="1752-153X-2-24-2"/></fig></sec></sec><sec><title>Conclusion</title><p>Cinfony makes it easy to combine complementary features of the three main Open Source cheminformatics toolkits. By presenting a standard simplified API, the learning curve associated with starting to use a new toolkit is greatly reduced, thus encouraging users of one toolkit to investigate the potential of others.</p><p>Cinfony is freely available from the Cinfony website [<xref ref-type="bibr" rid="B19">19</xref>], both as Python source code and as a Windows distribution containing dependencies. Installation instructions are provided for MacOSX, Linux and Windows.</p></sec><sec><title>Availability and requirements</title><p><bold>Project name: </bold>Cinfony</p><p><bold>Project home page: </bold><ext-link ext-link-type="uri" xlink:href="http://cinfony.googlecode.com"/></p><p><bold>Operating system(s): </bold>Platform independent</p><p><bold>Programming language: </bold>Python, Jython</p><p><bold>Other requirements: </bold>OpenBabel, CDK, RDKit, Java, OASA, JPype, Python Imaging Library</p><p><bold>License: </bold>BSD</p><p><bold>Any restrictions to use by non-academics: </bold>None</p></sec><sec><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec><title>Authors' contributions</title><p>NMOB conceived and developed Cinfony. GRH is the lead developer of OpenBabel and created the Python and Java SWIG bindings. All authors read and approved the final manuscript.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="S1"><caption><title>Additional file 1</title><p><bold>Miniwebsite API.</bold> A mini-website of the Cinfony API documentation.</p></caption><media xlink:href="1752-153X-2-24-S1.zip" mimetype="application" mime-subtype="x-zip-compressed"><caption><p>Click here for file</p></caption></media></supplementary-material><supplementary-material content-type="local-data" id="S2"><caption><title>Additional file 2</title><p><bold>Timing Code.</bold> A zip file containing Python, Java and C++ code used for run time comparisons for two test cases.</p></caption><media xlink:href="1752-153X-2-24-S2.zip" mimetype="application" mime-subtype="x-zip-compressed"><caption><p>Click here for file</p></caption></media></supplementary-material><supplementary-material content-type="local-data" id="S3"><caption><title>Additional file 3</title><p><bold>Miniwebsite Depictions.</bold> A mini-website showing a comparison of the depictions generated by several cheminformatics toolkits.</p></caption><media xlink:href="1752-153X-2-24-S3.zip" mimetype="application" mime-subtype="x-zip-compressed"><caption><p>Click here for file</p></caption></media></supplementary-material></sec></body><back><ack><sec><title>Acknowledgements</title><p>Cinfony would not be possible without the work of many Open Source projects. In particular, we thank several developers who responded quickly to bug reports or queries: Beda Kosata (OASA), Greg Landrum (RDKit), Tim Vandermeersch (OpenBabel), Steve M&#x000e9;nard (JPype). Thanks also to Gilbert Mueller and Chris Morley for feedback on installing Cinfony. NMOB thanks Google Code for providing free web hosting and development tools for Cinfony. We thank the anonymous reviewers for several useful suggestions.</p></sec></ack><ref-list><ref id="B1"><citation citation-type="other"><article-title>OpenBabel v.2.2.0</article-title><ext-link ext-link-type="uri" xlink:href="http://openbabel.org"/></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Steinbeck</surname><given-names>C</given-names></name><name><surname>Hoppe</surname><given-names>C</given-names></name><name><surname>Kuhn</surname><given-names>S</given-names></name><name><surname>Floris</surname><given-names>M</given-names></name><name><surname>Guha</surname><given-names>R</given-names></name><name><surname>Willighagen</surname><given-names>E</given-names></name></person-group><article-title>Recent Developments of the Chemistry Development Kit (CDK) &#x02013; An Open-Source Java Library for Chemo- and Bioinformatics</article-title><source>Curr Pharm Des</source><year>2006</year><volume>12</volume><fpage>2110</fpage><lpage>2120</lpage><pub-id pub-id-type="doi">10.2174/138161206777585274</pub-id></citation></ref><ref id="B3"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Landrum</surname><given-names>G</given-names></name></person-group><article-title>RDKit</article-title><ext-link ext-link-type="uri" xlink:href="http://www.rdkit.org"/></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Murray-Rust</surname><given-names>P</given-names></name><name><surname>Rzepa</surname><given-names>HS</given-names></name></person-group><article-title>Chemical Markup, XML, and the Worldwide Web. 1. Basic Principles</article-title><source>J Chem Inf Comput Sci</source><year>1999</year><volume>39</volume><fpage>928</fpage><lpage>942</lpage></citation></ref><ref id="B5"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Apodaca</surname><given-names>R</given-names></name><name><surname>O'Boyle</surname><given-names>N</given-names></name><name><surname>Dalke</surname><given-names>A</given-names></name><name><surname>Van Drie</surname><given-names>J</given-names></name><name><surname>Ertl</surname><given-names>P</given-names></name><name><surname>Hutchison</surname><given-names>G</given-names></name><name><surname>James</surname><given-names>CA</given-names></name><name><surname>Landrum</surname><given-names>G</given-names></name><name><surname>Morley</surname><given-names>C</given-names></name><name><surname>Willighagen</surname><given-names>E</given-names></name><name><surname>De Winter</surname><given-names>H</given-names></name></person-group><article-title>OpenSMILES</article-title><ext-link ext-link-type="uri" xlink:href="http://www.opensmiles.org"/></citation></ref><ref id="B6"><citation citation-type="other"><article-title>Daylight Chemical Information Systems Manual</article-title><ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html"/></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>O'Boyle</surname><given-names>NM</given-names></name><name><surname>Morley</surname><given-names>C</given-names></name><name><surname>Hutchison</surname><given-names>GR</given-names></name></person-group><article-title>Pybel: a Python wrapper for the OpenBabel cheminformatics toolkit</article-title><source>Chem Cent J</source><year>2008</year><volume>2</volume><fpage>5</fpage><pub-id pub-id-type="pmid">18328109</pub-id><pub-id pub-id-type="doi">10.1186/1752-153X-2-5</pub-id></citation></ref><ref id="B8"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Kosata</surname><given-names>B</given-names></name></person-group><article-title>OASA</article-title><ext-link ext-link-type="uri" xlink:href="http://bkchem.zirael.org/oasa_en.html"/></citation></ref><ref id="B9"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Raymond</surname><given-names>ES</given-names></name></person-group><source>The Art of UNIX Programming</source><year>2003</year><publisher-name>Reading, MA: Addison-Wesley</publisher-name><ext-link ext-link-type="uri" xlink:href="http://www.catb.org/~esr/writings/taoup/index.html"/></citation></ref><ref id="B10"><citation citation-type="other"><article-title>Symyx CTfile formats</article-title><ext-link ext-link-type="uri" xlink:href="http://www.mdli.com/downloads/public/ctfile/ctfile.jsp"/></citation></ref><ref id="B11"><citation citation-type="other"><article-title>KNIME &#x02013; Konstanz Information Miner</article-title><ext-link ext-link-type="uri" xlink:href="http://knime.org"/></citation></ref><ref id="B12"><citation citation-type="other"><article-title>SWIG v.1.3.36</article-title><ext-link ext-link-type="uri" xlink:href="http://www.swig.org"/></citation></ref><ref id="B13"><citation citation-type="other"><person-group person-group-type="author"><name><surname>M&#x000e9;nard</surname><given-names>S</given-names></name></person-group><article-title>JPype</article-title><ext-link ext-link-type="uri" xlink:href="http://jpype.sf.net"/></citation></ref><ref id="B14"><citation citation-type="other"><article-title>Boost.Python</article-title><ext-link ext-link-type="uri" xlink:href="http://www.boost.org/libs/python/doc/"/></citation></ref><ref id="B15"><citation citation-type="other"><person-group person-group-type="author"><collab>R development core team</collab></person-group><article-title>R: A language and environment for statistical computing</article-title><ext-link ext-link-type="uri" xlink:href="http://www.R-project.org"/></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Irwin</surname><given-names>JJ</given-names></name><name><surname>Shoichet</surname><given-names>BK</given-names></name></person-group><article-title>ZINC &#x02013; A Free Database of Commercially Available Compounds for Virtual Screening</article-title><source>J Chem Inf Model</source><year>2005</year><volume>45</volume><fpage>177</fpage><lpage>182</lpage><pub-id pub-id-type="pmid">15667143</pub-id><pub-id pub-id-type="doi">10.1021/ci049714+</pub-id></citation></ref><ref id="B17"><citation citation-type="other"><article-title>PubChem</article-title><ext-link ext-link-type="uri" xlink:href="http://pubchem.ncbi.nlm.nih.gov/"/></citation></ref><ref id="B18"><citation citation-type="other"><article-title>CACTVS Chemoinformatics Toolkit: Xemistry GmbH: Lahntal, Germany</article-title></citation></ref><ref id="B19"><citation citation-type="other"><person-group person-group-type="author"><name><surname>O'Boyle</surname><given-names>NM</given-names></name></person-group><article-title>Cinfony</article-title><ext-link ext-link-type="uri" xlink:href="http://cinfony.googlecode.com"/></citation></ref></ref-list></back></article>