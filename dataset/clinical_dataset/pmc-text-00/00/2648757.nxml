<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd"><article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">19208141</article-id><article-id pub-id-type="pmc">2648757</article-id><article-id pub-id-type="publisher-id">1471-2105-10-S1-S4</article-id><article-id pub-id-type="doi">10.1186/1471-2105-10-S1-S4</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research</subject></subj-group></article-categories><title-group><article-title>SE: an algorithm for deriving sequence alignment from a pair of superimposed structures</article-title></title-group><contrib-group><contrib id="A1" contrib-type="author"><name><surname>Tai</surname><given-names>Chin-Hsien</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>taic@mail.nih.gov</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Vincent</surname><given-names>James J</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>jjv5@uvm.edu</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Kim</surname><given-names>Changhoon</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>kimchan@mail.nih.gov</email></contrib><contrib id="A4" corresp="yes" contrib-type="author"><name><surname>Lee</surname><given-names>Byungkook</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>bklee@mail.nih.gov</email></contrib></contrib-group><aff id="I1"><label>1</label>Molecular Modeling and Bioinformatics Section, Laboratory of Molecular Biology, Center for Cancer Research, National Cancer Institute, National Institutes of Health, Bethesda, MD 20892, USA</aff><aff id="I2"><label>2</label>Bioinformatics Core, Vermont Genetics Network, Department of Biology, University of Vermont, Burlington, VT 05405, USA</aff><pub-date pub-type="collection"><year>2009</year></pub-date><pub-date pub-type="epub"><day>30</day><month>1</month><year>2009</year></pub-date><volume>10</volume><issue>Suppl 1</issue><supplement><named-content content-type="supplement-title">Selected papers from the Seventh Asia-Pacific Bioinformatics Conference (APBC 2009)</named-content><named-content content-type="supplement-editor">Michael Q Zhang, Michael S Waterman and Xuegong Zhang</named-content></supplement><fpage>S4</fpage><lpage>S4</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/10/S1/S4"/><permissions><copyright-statement>Copyright &#x000a9; 2009 Tai et al; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2009</copyright-year><copyright-holder>Tai et al; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p><!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>               Tai               Chin-Hsien                              taic@mail.nih.gov            </dc:author><dc:title>            SE: an algorithm for deriving sequence alignment from a pair of superimposed structures         </dc:title><dc:date>2009</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 10(Suppl 1): S4-. (2009)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2009)10:Suppl 1&#x0003c;S4&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>--></license></permissions><abstract><sec><title>Background</title><p>Generating sequence alignments from superimposed structures is an important part of many structure comparison programs. The accuracy of the alignment affects structure recognition, classification and possibly function prediction. Many programs use a dynamic programming algorithm to generate the sequence alignment from superimposed structures. However, this procedure requires using a gap penalty and, depending on the value of the penalty used, can introduce spurious gaps and misalignments. Here we present a new algorithm, Seed Extension (SE), for generating the sequence alignment from a pair of superimposed structures. The SE algorithm first finds "seeds", which are the pairs of residues, one from each structure, that meet certain stringent criteria for being structurally equivalent. Three consecutive seeds form a seed segment, which is extended along the diagonal of the alignment matrix in both directions. Distance and the amino acid type similarity between the residues are used to resolve conflicts that arise during extension of more than one diagonal. The manually curated alignments in the Conserved Domain Database were used as the standard to assess the quality of the sequence alignments.</p></sec><sec><title>Results</title><p>SE gave an average accuracy of 95.9% over 582 pairs of superimposed proteins tested, while CHIMERA, LSQMAN, and DP extracted from SHEBA, which all use a dynamic programming algorithm, yielded 89.9%, 90.2% and 91.0%, respectively. For pairs of proteins with low sequence or structural similarity, SE produced alignments up to 18% more accurate on average than the next best scoring program. Improvement was most pronounced when the two superimposed structures contained equivalent helices or beta-strands that crossed at an angle. When the SE algorithm was implemented in SHEBA to replace the dynamic programming routine, the alignment accuracy improved by 10% on average for structure pairs with RMSD between 2 and 4 &#x000c5;. SE also used considerably less CPU time than DP.</p></sec><sec><title>Conclusion</title><p>The Seed Extension algorithm is fast and, without using a gap penalty, produces more accurate sequence alignments from superimposed structures than three other programs tested that use dynamic programming algorithm.</p></sec></abstract><conference><conf-date>13&#x02013;16 January 2009</conf-date><conf-name>The Seventh Asia Pacific Bioinformatics Conference (APBC 2009)</conf-name><conf-loc>Beijing, China</conf-loc></conference></article-meta></front><body><sec><title>Background</title><p>Structure comparison and accurate structure-based sequence alignment are essential operations in structural bioinformatics. As of September 2008, the total number of structures in the Protein Data Bank (PDB) [<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>] is more than 53000 and is increasing by 20% per year. Good structure comparison algorithms are necessary in order to compare and classify these structures and to derive accurate sequence alignments, which can help establish evolutionary relationships among the proteins.</p><p>Many protein structure alignment programs include iterations of a two-step cycle: first superposing the two structures according to a given sequence alignment, and then deriving a new sequence alignment from the superimposed structures. Dynamic programming algorithm [<xref ref-type="bibr" rid="B3">3</xref>,<xref ref-type="bibr" rid="B4">4</xref>] is a widely used method for the second step. Programs such as SSAP [<xref ref-type="bibr" rid="B5">5</xref>], STRUCTAL [<xref ref-type="bibr" rid="B6">6</xref>], LSQMAN [<xref ref-type="bibr" rid="B7">7</xref>], CE [<xref ref-type="bibr" rid="B8">8</xref>], MATRAS [<xref ref-type="bibr" rid="B9">9</xref>], SHEBA [<xref ref-type="bibr" rid="B10">10</xref>], FAST [<xref ref-type="bibr" rid="B11">11</xref>] and others [<xref ref-type="bibr" rid="B12">12</xref>] use it to generate the alignments. However, dynamic programming algorithm requires using a gap penalty function, for which there is little guidance. It also uses a score function that usually considers only the distance between matching residues. Use of such a function can introduce incorrect alignments.</p><p>In order to recognize residue pairs that are structurally equivalent but not necessarily the closest ones and to avoid using a gap penalty function, we devised a novel algorithm called Seed Extension (SE) for obtaining the sequence alignment from a pair of superimposed structures. The performance of the new algorithm was compared with those of three programs that use the dynamic programming algorithm, namely LSQMAN, CHIMERA [<xref ref-type="bibr" rid="B13">13</xref>] and DP, which is a program extracted from SHEBA. LSQMAN and CHIMERA are two well-known programs and were chosen because they were easily available and could, without any modification, accept two superimposed structures and output the sequence alignment. The manually curated alignments in the Conserved Domain Database (CDD) [<xref ref-type="bibr" rid="B14">14</xref>] were used as the gold standard. Our results show that SE is fast and generates more accurate alignments, especially in cases where sequence or structural similarity is low. The program can be incorporated into an existing structure comparison program or it can simply be appended to such a program to improve its alignment quality.</p></sec><sec><title>Results</title><sec><title>SE improves the accuracy of sequence alignments</title><p>Figures <xref ref-type="fig" rid="F1">1A</xref> and <xref ref-type="fig" rid="F1">1B</xref> show the average fraction of correctly aligned residues, <italic>f</italic><sub><italic>CAR</italic></sub>, in each RMSD and sequence identity ranges respectively by different programs. As expected, both SE and dynamic programming algorithms generated correct sequence alignments for structurally similar pairs. However, for pairs with RMSD greater than 2 &#x000c5;, the average <italic>f</italic><sub><italic>CAR </italic></sub>of SE was 9% to 28% better than those of programs using dynamic programming algorithm. For pairs with less than 40% sequence identity, the improvement was 3% to 8%. While CHIMERA, LSQMAN and DP yielded the average accuracy of 89.9%, 90.2% and 91.0% respectively over the 582 pairs of superimposed proteins, SE gave an average <italic>f</italic><sub><italic>CAR </italic></sub>of 95.9%.</p><fig position="float" id="F1"><label>Figure 1</label><caption><p><bold>Comparison of the average alignment accuracy</bold>. The 582 superimposed pairs of proteins were binned according to (A) the RMSD or (B) the sequence identity of CDD alignment and the average fraction of correctly aligned residues (<italic>f</italic><sub><italic>CAR</italic></sub>) were averaged over each bin for each program. The X-axis gives the bins labeled by the upper limit of the range. The numbers of structure pairs in each bin are shown in grey using the right-side Y-axis scale.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-1"/></fig><p>We also compared the frequency that a program gave best alignment for each pair. The fraction of pairs for which a given program generated the highest <italic>f</italic><sub><italic>CAR</italic></sub>, or tied with another programs with the highest <italic>f</italic><sub><italic>CAR</italic></sub>, in different RMSD and sequence identity ranges are shown in Figures <xref ref-type="fig" rid="F2">2A</xref> and <xref ref-type="fig" rid="F2">2B</xref>, respectively. It is clear that SE generated almost always (never less than 85% of the time) the best alignment in all RMSD and homology ranges. The superior performance generally becomes more pronounced as the RMSD increases or the sequence identity decreases. Overall, SE generated the best alignment for 94.3% of the pairs if ties are included and 66.7% if ties are not counted.</p><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>Frequency with which a program generated the best <italic>f</italic><sub><italic>CAR </italic></sub>or tied for the best</bold>. The X-axis gives the RMSD (A) or sequence identity (B) bins as in Figure 1. The Y-axis gives the percentage of structure pairs within each bin for which a given program performed best or tied for the best.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-2"/></fig><p>Figure <xref ref-type="fig" rid="F3">3</xref> shows an example of the structure superposition and sequence alignment of a 3-helical bundle structure pair in the cd03439 family. The structures were superimposed according to the CDD alignment. The aligned pairs generated from different programs are indicated in green pseudobonds in the superimposed structures and in bold characters in the sequence alignments. Panel A shows the alignment from SE, which agrees 100% with CDD. The green pseudobonds indicate three well-aligned regions, which are also evident in the sequence alignment. On the other hand, panel B shows the alignment from DP which indicates only two well-aligned regions; the third region, enveloped in magenta dotted line, is poorly aligned with many gaps.</p><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>Alignments of a sample pair</bold>. The two structures in CD03493 <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd03493"/>, 2FBW_Q (red) and 1L0V_C (blue) were superimposed according to the CDD alignment in both panels A and B. The RMSD is 3.88 &#x000c5; and the sequence identity is 8%. Pseudobonds in green indicate the aligned pairs from SE (Panel A) and DP (panel B). The sequence alignment is shown below in both panels; residues in bold upper case letters are aligned, others are not. The region in the magenta dashed squares corresponds to the magenta dashed oval in the superimposed structures above.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-3"/></fig></sec><sec><title>SHEBA also generates more accurate alignment when the dynamic programming algorithm is replaced by SE</title><p>In order to see if the SE algorithm improves the alignment quality of structure comparison programs, it was implemented in SHEBA to replace the original dynamic programming algorithm. In SHEBA, after the initial alignment is found for a given pair of structures, they are superimposed according to Kabsch [<xref ref-type="bibr" rid="B15">15</xref>,<xref ref-type="bibr" rid="B16">16</xref>] and then a new sequence alignment is obtained from the superimposed structures using either the original DP routine or the new SE procedure. This Kabsch-DP or Kabsch-SE refinement cycle is repeated until convergence or until a set number of cycles has been completed.</p><p>The average <italic>f</italic><sub><italic>CAR </italic></sub>values obtained by the new version SHEBA4.2 with the DP or the SE routines are shown in Figure <xref ref-type="fig" rid="F4">4</xref>. Also included are the results from the original version, SHEBA3.1, which uses only the DP and a slightly different iteration scheme (see Methods). As can be seen, SHEBA with Kabsch-SE cycle generated more accurate alignments than the versions with the dynamic programming algorithm, regardless of the iteration scheme. On average, the <italic>f</italic><sub><italic>CAR </italic></sub>of SHEBA with SE was 5% better than SHEBA with DP. For pairs with RMSD larger than 2 &#x000c5;, SHEBA with SE was 9% to 12% better while for those with sequence identity less than 40%, the improvement was 4% to 10%.</p><fig position="float" id="F4"><label>Figure 4</label><caption><p><bold>Comparison of average alignment accuracy between SE and DP in SHEBA</bold>. SE was implemented in SHEBA4.2 and compared with the DP routine of the new iteration scheme, SHEBA4.2-DP, and with the original scheme SHEBA3.1 (see Methods). The <italic>f</italic><sub><italic>CAR </italic></sub>values were averaged over different RMSD (A) and sequence identity (B) bins as in Figure 1.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-4"/></fig></sec><sec><title>Execution time comparison</title><p>To compare the speed of SE and DP algorithms, we measured the CPU time spent on SE and DP routines implemented in SHEBA. In Figure <xref ref-type="fig" rid="F5">5</xref>, panel A shows the average CPU time per cycle of SE (red dots) and DP (blue dots) routines as a function of the product of the sizes of the two proteins compared for the 582 structurally similar pairs. The SE time increases nearly linearly with the product of the sizes whereas the DP time clearly increases much faster. A similar trend is seen in panel B, which gives the total CPU time taken for complete iteration of the refinement cycles for each pair of structures. It should be noted that SHEBA with DP and SHEBA with SE may run different numbers of cycles for a given pair of structures, depending on when the alignment converges. But the average number of cycles was comparable, 41 for SE and 49 for DP. SHEBA with SE was two times faster, on average, than SHEBA with DP, for proteins with 200 residues and more than 10 times faster for some larger protein pairs.</p><fig position="float" id="F5"><label>Figure 5</label><caption><p><bold>Comparison of CPU times of SE and DP in SHEBA</bold>. The CPU time to execute the SE and DP routine in SHEBA are plotted for each structure pair against the product of the lengths of the two proteins. (A) Average CPU time to execute one cycle of SE or DP. (B) CPU time to complete the Kabsch-SE and Kabsch-DP procedure, which involves multiple cycles of SE or DP and the Kabsch superposition process.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-5"/></fig><p>Above timing was for comparing a pair of similar structures. However, a common use of a structure comparison program is to search for similar structures in a structure database, which typically contains many more dissimilar structures than similar ones. In order to see how fast SE algorithm runs for dissimilar structures, we selected three CDD domains, 1RYT <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd00350"/>,3AKY <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd01428"/> and 1H18_A <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd01678"/>, with the smallest (33 residues), medium (204 residues) and the largest (747 residues) number of residues and compared each to all 1164 CDD domains with PDB structure. The CPU time used by DP routine divided by the CPU time used by SE for each pair is plotted against all the 1164 target structures in Figure <xref ref-type="fig" rid="F6">6</xref>. For the medium size query, SE is more than two times faster than DP when the target structure has 200 residues and more than 5 times faster when the target has 500 or more residues.</p><fig position="float" id="F6"><label>Figure 6</label><caption><p><bold>Comparison of CPU times of SE and DP in SHEBA for one against all structure comparisons</bold>. Three proteins were selected, the smallest (1RYT <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd00350"/>, 33 residues, in magenta), a medium sized (3AKY <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd01428"/>, 204, orange) and the largest (1H18_A <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=cd01678"/>, 747, green). Structure comparisons were made between each of these and all other 1164 domains using SHEBA with SE or DP. The average CPU time executed per DP cycle was divided by that per SE cycle for each pair and the ratio was plotted against the size of the target protein.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-6"/></fig></sec></sec><sec><title>Discussion</title><p>Obtaining the best sequence alignment from a pair of superimposed structures is a non-trivial problem when the two structures are not entirely similar. The common practice is to select a maximal number of aligned residue pairs that will minimize the aggregate sum of distances between C&#x003b1; atoms of the selected pairs. The natural algorithm for doing this is the dynamic programming algorithm.</p><p>However, blind minimization of the distance sum, in conjunction with the use of an essentially arbitrary gap penalty function, can produce poor alignments. The problem is particularly easy to see when two structurally equivalent helices cross each other at an angle as in the case shown in Figure <xref ref-type="fig" rid="F3">3</xref>. In such cases, insufficient gap penalty often leads to an alignment of the closest, but not necessarily structurally equivalent, residues, with many gaps.</p><p>The SE algorithm is a heuristic algorithm, which approximately follows the mental process that one of the authors (BL) goes through when he manually writes down the alignment from visual inspection of a pair of superimposed structures displayed on a computer screen. It starts with a few residue pairs that are clearly equivalent and then extends the alignment without introducing a gap until the inter-residue distance changes abruptly. There is no explicit notion of a gap penalty, although it is implicitly present since the algorithm attempts to extend the alignment without a gap. We have shown in this study that this algorithm produces more accurate alignments than the dynamic programming algorithms implemented in three different programs. It is also considerably faster than the latter, especially when the structures are large. An additional merit of the algorithm is that it generates strictly symmetric alignments, i.e. it produces the same alignment when the query and target structures are swapped. This is not always the case with the dynamic programming algorithm.</p><p>The algorithm requires several parameters, including the distance change cutoff value, which is used to decide when to stop extension of the alignment, the scalar product threshold value, which measures the similarity of orientation of residue triplets and which is used to identify the seed alignments, and the distance tolerance and the sequence similarity cutoff values, which are used to decide when to consider the sequence similarity in choosing among a couple of conflicting alignments. Initially, we chose the values of these parameters intuitively. The values of the first two parameters were then varied within a limited range and the optimal values were chosen using the 582 pairs of alignments selected from the CDD database. Although CDD is the most recent expert-curated database, there are other structure-based sequence alignment databases, e.g. HOMSTRAD[<xref ref-type="bibr" rid="B17">17</xref>] and FSSP[<xref ref-type="bibr" rid="B18">18</xref>]. It is possible that use of these other databases can alter the optimal values of these parameters. Also, adjustments may be indicated as the program is tested using more structure pairs and used more widely. However, we also expect that any adjustment will be small in magnitude and, in particular, SE will remain superior to a dynamic programming algorithm.</p></sec><sec><title>Conclusion</title><p>SE algorithm produces more accurate sequence alignments from superimposed structures than the dynamic programming algorithms used in CHIMERA, LSQMAN or SHEBA, especially in pairs of proteins with low sequence or structure similarity. SE does not require gap penalties but the alignments have fewer gaps. SHEBA implemented with SE algorithm takes less CPU time and generates more accurate alignments than the original version with dynamic programming algorithm. It is available as a software package for implementing in other structure comparison programs.</p></sec><sec sec-type="methods"><title>Methods</title><sec><title>Seed Extension algorithm</title><p>The input of the algorithm is the coordinates of two superimposed structures and the output is the sequence alignment based on that superposition. The flow chart of the algorithm is shown in Figure <xref ref-type="fig" rid="F7">7</xref>.</p><fig position="float" id="F7"><label>Figure 7</label><caption><p>Overview of the Seed Extension algorithm.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-7"/></fig><sec><title>1. Compute distance matrix</title><p>Given a pair of superimposed structures A of length <italic>m </italic>and B of length <italic>n</italic>, the <italic>m </italic>&#x000d7; <italic>n </italic>matrix M of the average C&#x003b1; distances is defined as</p><p><disp-formula><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" id="M1" name="1471-2105-10-S1-S4-i1" overflow="scroll">                        <mml:semantics>                           <mml:mrow>                              <mml:msub>                                 <mml:mi>M</mml:mi>                                 <mml:mrow>                                    <mml:mi>i</mml:mi>                                    <mml:mo>,</mml:mo>                                    <mml:mi>j</mml:mi>                                 </mml:mrow>                              </mml:msub>                              <mml:mo>=</mml:mo>                              <mml:msqrt>                                 <mml:mrow>                                    <mml:mfrac>                                       <mml:mrow>                                          <mml:mi>d</mml:mi>                                          <mml:mi>i</mml:mi>                                          <mml:mi>s</mml:mi>                                          <mml:msubsup>                                             <mml:mi>t</mml:mi>                                             <mml:mrow>                                                <mml:mi>i</mml:mi>                                                <mml:mo>&#x02212;</mml:mo>                                                <mml:mn>1</mml:mn>                                                <mml:mo>,</mml:mo>                                                <mml:mi>j</mml:mi>                                                <mml:mo>&#x02212;</mml:mo>                                                <mml:mn>1</mml:mn>                                             </mml:mrow>                                             <mml:mn>2</mml:mn>                                          </mml:msubsup>                                          <mml:mo>+</mml:mo>                                          <mml:mi>d</mml:mi>                                          <mml:mi>i</mml:mi>                                          <mml:mi>s</mml:mi>                                          <mml:msubsup>                                             <mml:mi>t</mml:mi>                                             <mml:mrow>                                                <mml:mi>i</mml:mi>                                                <mml:mo>,</mml:mo>                                                <mml:mi>j</mml:mi>                                             </mml:mrow>                                             <mml:mn>2</mml:mn>                                          </mml:msubsup>                                          <mml:mo>+</mml:mo>                                          <mml:mi>d</mml:mi>                                          <mml:mi>i</mml:mi>                                          <mml:mi>s</mml:mi>                                          <mml:msubsup>                                             <mml:mi>t</mml:mi>                                             <mml:mrow>                                                <mml:mi>i</mml:mi>                                                <mml:mo>+</mml:mo>                                                <mml:mn>1</mml:mn>                                                <mml:mo>,</mml:mo>                                                <mml:mi>j</mml:mi>                                                <mml:mo>+</mml:mo>                                                <mml:mn>1</mml:mn>                                             </mml:mrow>                                             <mml:mn>2</mml:mn>                                          </mml:msubsup>                                       </mml:mrow>                                       <mml:mn>3</mml:mn>                                    </mml:mfrac>                                 </mml:mrow>                              </mml:msqrt>                           </mml:mrow>                                                   </mml:semantics>                     </mml:math></disp-formula></p><p>where <italic>dist</italic><sub><italic>i</italic>, <italic>j </italic></sub>is the distance between the C&#x003b1; atoms of residue <italic>i </italic>of structure A and residue <italic>j </italic>of structure B.</p></sec><sec><title>2. Find seed and seed segments (SSs)</title><p>A pair of residues (<italic>i</italic>, <italic>j</italic>) is a seed if its corresponding matrix element <italic>M</italic><sub><italic>i</italic>, <italic>j </italic></sub>is the minimum in both the <italic>i</italic><sup><italic>th </italic></sup>row and the <italic>j</italic><sup><italic>th </italic></sup>column and their scalar product is greater than 0. The scalar product here refers to that between unit vectors which bisect the angles (i-1, i, i+1) and (j-1, j, j+1). A seed segment (SS) is a set of consecutive seeds along one diagonal. After all seeds have been identified, seed segments of length 1 or 2 (isolated seeds or isolated pairs of seeds) are discarded and treated as not aligned. The status of each residue in structure A is stored as a "seed" or "extended pair" (see the following section), with the paired residue number in B, or "not yet aligned".</p></sec><sec><title>3. Extend seed segments to obtain aligned segments (ASs)</title><p>An aligned segment (AS) is a set of ungapped, at least 3 consecutive residue pairs that are aligned. ASs are initially set equal to SSs, which are then extended along the diagonal in both directions according to a protocol detailed in Figure <xref ref-type="fig" rid="F8">8</xref>. Briefly, an AS is extended by a residue pair if the distance between the new pair is not more than the distance between the last aligned pair by a cutoff distance (default is 3.0 &#x000c5;). The extension is terminated if either of the candidate residue pair is a seed residue (a seed pair is preferred over an extended pair) or if the candidate residue pair is an extended pair (two ASs on the same diagonal are joined). If the extension meets a residue which is a part of a pre-existing AS on a different diagonal, the extension is either stopped or continued, in which case the pre-existing AS is correspondingly shortened, depending on which AS is to be preferred. The factors considered for this choice include the distance between the residue pairs and the similarity of the residue pairs as measured by the BLOSUM62 matrix.</p><fig position="float" id="F8"><label>Figure 8</label><caption><p><bold>Detailed flowchart of the seed extension process</bold>. The terminal residue pair (<italic>i</italic>, <italic>j</italic>) of an aligned segment and the direction of the extension (extDirection) are the input. The value of extDirection is -1 or +1 for extension toward the N- or the C-terminus, respectively.</p></caption><graphic xlink:href="1471-2105-10-S1-S4-8"/></fig></sec><sec><title>4. Collect consistent sets of diagonals and choose the best set</title><p>After all SSs are extended in both directions, a dynamic programming algorithm is used to choose the best set of consistent ASs. A set of ASs is consistent if for every AS pair p and q in the set, i<sub>p </sub>&#x0003c; i<sub>q </sub>implies j<sub>p </sub>&#x0003c; j<sub>q</sub>, where (i<sub>p</sub>, j<sub>p</sub>) and (i<sub>q</sub>, j<sub>q</sub>) are the starting residue numbers of the p<sup>th </sup>and q<sup>th </sup>ASs in the set, respectively. Consistency ensures that the resulting alignment respects sequence connectivity of the aligned residues in both structures. The best set of ASs was the one with the largest total number of aligned residue pairs in the set.</p></sec></sec><sec><title>SE, DP, and SHEBA modifications</title><p>The Seed Extension algorithm was first written as a standalone program called SE. In order to compare this algorithm with the dynamic programming algorithm, the dynamic programming routine in the program SHEBA was isolated into a standalone program, which we refer to as DP. Prior to the implementation of the Seed Extension algorithm into SHEBA, the program SHEBA was first modified by removing some known bugs and by altering some features of the refinement procedure. In SHEBA3.1, after initial alignment, the program enters seven different weight schemes of 3 superposition-alignment cycles each. The alignment that has the most number of aligned residues is chosen as the final alignment. This is the last updated version that still employs only the dynamic programming algorithm.</p><p>The new SHEBA4.2, with &#x02013; dp option, also employs the dynamic programming algorithm but uses a modified iteration scheme. It also uses seven different weight schemes but, for each weight scheme, the program first runs three weighted superposition-alignment cycles followed by up to 10 unit weight cycles. If the alignment converged within 10 cycles, that is, the alignment did not change in two consecutive cycles, the converged alignment is selected; otherwise, the alignment which gives the most number of aligned residues in the next cycle is chosen for that weight scheme. The alignment that gives the largest number of aligned residues among the seven different weight schemes is chosen as the final alignment. SHEBA4.2 with &#x02013; se option has the same iteration scheme but the dynamic programming algorithm in the alignment part of the superposition-alignment cycle is replaced by the Seed Extension algorithm.</p></sec><sec><title>Data set of superimposed structures</title><p>A set of structurally aligned protein pairs was selected from NCBI's Conserved Domain Database as described below. In CDD version 2.09, there were 2009 expert curated families with names starting with 'cd', of which 593 had at least two protein sequences with PDB structure files available that did not contain missing coordinates or non-standard amino acid residues. From each of these families, the pair with the least sequence similarity was selected and structurally superimposed using CHIMERA [<xref ref-type="bibr" rid="B19">19</xref>] based on CDD alignments. Discarding those with C&#x003b1; RMSD greater than 5 &#x000c5; resulted in 582 protein pairs.</p></sec><sec><title>Structure-based sequence alignment programs</title><p>We evaluated following programs for the accuracy of the sequence alignment generated from a given structural superposition: CHIMERA, LSQMAN version 060802, DP, and SE. The option GLocal_nw, global-superposition-distance-based Needleman-Wunsch sequence alignment, was used in LSQMAN to generate a sequence alignment from two superimposed structures. The default C&#x003b1; distance cut-off value used in CHIMERA, LSQMAN and DP was 3.5 &#x000c5;. Default values were used for the gap penalty.</p></sec><sec><title>Alignment accuracy measure</title><p>The CDD alignments were used as reference alignments; those generated by programs were referred to as test alignments. The alignment accuracy was measured by means of the fraction of correctly aligned residues, <italic>f</italic><sub><italic>CAR</italic></sub>. This is defined as the number of aligned pairs in the reference alignment that are preserved in the test alignment, divided by that in the reference alignment[<xref ref-type="bibr" rid="B20">20</xref>,<xref ref-type="bibr" rid="B21">21</xref>].</p></sec><sec><title>Computing time measurement</title><p>To measure the speed of the algorithm, CPU time was retrieved by the <italic>clock </italic>function at the beginning and end of the DP or SE routine. The values were divided by the number of clock ticks per second to convert to the execution time. The average CPU time of SE or DP routine was obtained as the sum of elapsed time for all cycles divided by the number of cycles. The total CPU time to run the whole refinement cycles, including both the superposition and alignment generation, was also recorded. All time measurements were made on a Power Mac G5 with Dual PowerPC 970 2 GHz CPU.</p></sec></sec><sec><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec><title>Authors' contributions</title><p>CHT implemented and improved the algorithm, performed the tests, and wrote the manuscript. JJV prepared the test set and wrote the routine that collects consistent set of diagonals. CK tested the programs. BL conceived the project, designed the algorithm and wrote the manuscript.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>This research was supported by the Intramural Research Program of the National Cancer Institute, National Institutes of Health.</p><p>This article has been published as part of <italic>BMC Bioinformatics </italic>Volume 10 Supplement 1, 2009: Proceedings of The Seventh Asia Pacific Bioinformatics Conference (APBC) 2009. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/10?issue=S1"/></p></sec></ack><ref-list><ref id="B1"><citation citation-type="other"><article-title>RCSB Protein Data Bank</article-title><ext-link ext-link-type="uri" xlink:href="http://www.rcsb.org/pdb/statistics/contentGrowthChart.do?content = total&#x00026;seqid=100"/></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Berman</surname><given-names>HM</given-names></name><name><surname>Westbrook</surname><given-names>J</given-names></name><name><surname>Feng</surname><given-names>Z</given-names></name><name><surname>Gilliland</surname><given-names>G</given-names></name><name><surname>Bhat</surname><given-names>TN</given-names></name><name><surname>Weissig</surname><given-names>H</given-names></name><name><surname>Shindyalov</surname><given-names>IN</given-names></name><name><surname>Bourne</surname><given-names>PE</given-names></name></person-group><article-title>The Protein Data Bank</article-title><source>Nucleic acids research</source><year>2000</year><volume>28</volume><fpage>235</fpage><lpage>242</lpage><pub-id pub-id-type="pmid">10592235</pub-id><pub-id pub-id-type="doi">10.1093/nar/28.1.235</pub-id></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Needleman</surname><given-names>SB</given-names></name><name><surname>Wunsch</surname><given-names>CD</given-names></name></person-group><article-title>A general method applicable to the search for similarities in the amino acid sequence of two proteins</article-title><source>J Mol Biol</source><year>1970</year><volume>48</volume><fpage>443</fpage><lpage>453</lpage><pub-id pub-id-type="pmid">5420325</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(70)90057-4</pub-id></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>TF</given-names></name><name><surname>Waterman</surname><given-names>MS</given-names></name></person-group><article-title>Identification of common molecular subsequences</article-title><source>J Mol Biol</source><year>1981</year><volume>147</volume><fpage>195</fpage><lpage>197</lpage><pub-id pub-id-type="pmid">7265238</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Taylor</surname><given-names>WR</given-names></name><name><surname>Orengo</surname><given-names>CA</given-names></name></person-group><article-title>Protein structure alignment</article-title><source>J Mol Biol</source><year>1989</year><volume>208</volume><fpage>1</fpage><lpage>22</lpage><pub-id pub-id-type="pmid">2769748</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(89)90084-3</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Subbiah</surname><given-names>S</given-names></name><name><surname>Laurents</surname><given-names>DV</given-names></name><name><surname>Levitt</surname><given-names>M</given-names></name></person-group><article-title>Structural similarity of DNA-binding domains of bacteriophage repressors and the globin core</article-title><source>Curr Biol</source><year>1993</year><volume>3</volume><fpage>141</fpage><lpage>148</lpage><pub-id pub-id-type="pmid">15335781</pub-id><pub-id pub-id-type="doi">10.1016/0960-9822(93)90255-M</pub-id></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kleywegt</surname><given-names>GJ</given-names></name></person-group><article-title>Use of non-crystallographic symmetry in protein structure refinement</article-title><source>Acta Crystallographica</source><year>1996</year><volume>52</volume><fpage>842</fpage><lpage>857</lpage></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Shindyalov</surname><given-names>IN</given-names></name><name><surname>Bourne</surname><given-names>PE</given-names></name></person-group><article-title>Protein structure alignment by incremental combinatorial extension (CE) of the optimal path</article-title><source>Protein Engineering</source><year>1998</year><volume>11</volume><fpage>739</fpage><lpage>747</lpage><pub-id pub-id-type="pmid">9796821</pub-id><pub-id pub-id-type="doi">10.1093/protein/11.9.739</pub-id></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kawabata</surname><given-names>T</given-names></name><name><surname>Nishikawa</surname><given-names>K</given-names></name></person-group><article-title>Protein structure comparison using the markov transition model of evolution</article-title><source>Proteins</source><year>2000</year><volume>41</volume><fpage>108</fpage><lpage>122</lpage><pub-id pub-id-type="pmid">10944398</pub-id><pub-id pub-id-type="doi">10.1002/1097-0134(20001001)41:1&#x0003c;108::AID-PROT130&#x0003e;3.0.CO;2-S</pub-id></citation></ref><ref id="B10"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Jung</surname><given-names>J</given-names></name><name><surname>Lee</surname><given-names>B</given-names></name></person-group><article-title>Protein structure alignment using environmental profiles</article-title><source>Protein Engineering</source><year>2000</year><volume>13</volume><fpage>535</fpage><lpage>543</lpage><pub-id pub-id-type="pmid">10964982</pub-id><pub-id pub-id-type="doi">10.1093/protein/13.8.535</pub-id></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Zhu</surname><given-names>J</given-names></name><name><surname>Weng</surname><given-names>Z</given-names></name></person-group><article-title>FAST: a novel protein structure alignment algorithm</article-title><source>Proteins</source><year>2005</year><volume>58</volume><fpage>618</fpage><lpage>627</lpage><pub-id pub-id-type="pmid">15609341</pub-id><pub-id pub-id-type="doi">10.1002/prot.20331</pub-id></citation></ref><ref id="B12"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Feng</surname><given-names>ZK</given-names></name><name><surname>Sippl</surname><given-names>MJ</given-names></name></person-group><article-title>Optimum superimposition of protein structures: ambiguities and implications</article-title><source>Folding &#x00026; Design</source><year>1996</year><volume>1</volume><fpage>123</fpage><lpage>132</lpage><pub-id pub-id-type="pmid">9079372</pub-id><pub-id pub-id-type="doi">10.1016/S1359-0278(96)00021-1</pub-id></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Pettersen</surname><given-names>EF</given-names></name><name><surname>Goddard</surname><given-names>TD</given-names></name><name><surname>Huang</surname><given-names>CC</given-names></name><name><surname>Couch</surname><given-names>GS</given-names></name><name><surname>Greenblatt</surname><given-names>DM</given-names></name><name><surname>Meng</surname><given-names>EC</given-names></name><name><surname>Ferrin</surname><given-names>TE</given-names></name></person-group><article-title>UCSF Chimera &#x02013; a visualization system for exploratory research and analysis</article-title><source>J Comput Chem</source><year>2004</year><volume>25</volume><fpage>1605</fpage><lpage>1612</lpage><pub-id pub-id-type="pmid">15264254</pub-id><pub-id pub-id-type="doi">10.1002/jcc.20084</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Marchler-Bauer</surname><given-names>A</given-names></name><name><surname>Anderson</surname><given-names>JB</given-names></name><name><surname>Cherukuri</surname><given-names>PF</given-names></name><name><surname>DeWeese-Scott</surname><given-names>C</given-names></name><name><surname>Geer</surname><given-names>LY</given-names></name><name><surname>Gwadz</surname><given-names>M</given-names></name><name><surname>He</surname><given-names>S</given-names></name><name><surname>Hurwitz</surname><given-names>DI</given-names></name><name><surname>Jackson</surname><given-names>JD</given-names></name><name><surname>Ke</surname><given-names>Z</given-names></name><etal></etal></person-group><article-title>CDD: a Conserved Domain Database for protein classification</article-title><source>Nucleic Acids Res</source><year>2005</year><fpage>D192</fpage><lpage>196</lpage><pub-id pub-id-type="pmid">15608175</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kabsch</surname><given-names>W</given-names></name><name><surname>Kabsch</surname><given-names>H</given-names></name><name><surname>Eisenberg</surname><given-names>D</given-names></name></person-group><article-title>Packing in a new crystalline form of glutamine synthetase from Escherichia coli</article-title><source>J Mol Biol</source><year>1976</year><volume>100</volume><fpage>283</fpage><lpage>291</lpage><pub-id pub-id-type="pmid">3654</pub-id><pub-id pub-id-type="doi">10.1016/S0022-2836(76)80064-2</pub-id></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Heidner</surname><given-names>EG</given-names></name><name><surname>Frey</surname><given-names>TG</given-names></name><name><surname>Held</surname><given-names>U</given-names></name><name><surname>Weissman</surname><given-names>LJ</given-names></name><name><surname>Fenna</surname><given-names>RE</given-names></name><name><surname>Lei</surname><given-names>M</given-names></name><name><surname>Harel</surname><given-names>M</given-names></name><name><surname>Kabsch</surname><given-names>H</given-names></name><name><surname>Sweet</surname><given-names>RM</given-names></name><name><surname>Eisenberg</surname><given-names>D</given-names></name></person-group><article-title>New crystal forms of glutamine synthetase and implications for the molecular structure</article-title><source>J Mol Biol</source><year>1978</year><volume>122</volume><fpage>163</fpage><lpage>173</lpage><pub-id pub-id-type="pmid">28418</pub-id><pub-id pub-id-type="doi">10.1016/0022-2836(78)90033-5</pub-id></citation></ref><ref id="B17"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Mizuguchi</surname><given-names>K</given-names></name><name><surname>Deane</surname><given-names>CM</given-names></name><name><surname>Blundell</surname><given-names>TL</given-names></name><name><surname>Overington</surname><given-names>JP</given-names></name></person-group><article-title>HOMSTRAD: a database of protein structure alignments for homologous families</article-title><source>Protein Sci</source><year>1998</year><volume>7</volume><fpage>2469</fpage><lpage>2471</lpage><pub-id pub-id-type="pmid">9828015</pub-id></citation></ref><ref id="B18"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Holm</surname><given-names>L</given-names></name><name><surname>Sander</surname><given-names>C</given-names></name></person-group><article-title>The FSSP database of structurally aligned protein fold families</article-title><source>Nucleic Acids Res</source><year>1994</year><volume>22</volume><fpage>3600</fpage><lpage>3609</lpage><pub-id pub-id-type="pmid">7937067</pub-id></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Meng</surname><given-names>EC</given-names></name><name><surname>Pettersen</surname><given-names>EF</given-names></name><name><surname>Couch</surname><given-names>GS</given-names></name><name><surname>Huang</surname><given-names>CC</given-names></name><name><surname>Ferrin</surname><given-names>TE</given-names></name></person-group><article-title>Tools for integrated sequence-structure analysis with UCSF Chimera</article-title><source>BMC Bioinformatics</source><year>2006</year><volume>7</volume><fpage>339</fpage><pub-id pub-id-type="pmid">16836757</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-7-339</pub-id></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Nayeem</surname><given-names>A</given-names></name><name><surname>Sitkoff</surname><given-names>D</given-names></name><name><surname>Krystek</surname><given-names>S</given-names><suffix>Jr</suffix></name></person-group><article-title>A comparative study of available software for high-accuracy homology modeling: from sequence alignments to structural models</article-title><source>Protein Sci</source><year>2006</year><volume>15</volume><fpage>808</fpage><lpage>824</lpage><pub-id pub-id-type="pmid">16600967</pub-id><pub-id pub-id-type="doi">10.1110/ps.051892906</pub-id></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Kim</surname><given-names>C</given-names></name><name><surname>Lee</surname><given-names>B</given-names></name></person-group><article-title>Accuracy of structure-based sequence alignment of automatic methods</article-title><source>BMC Bioinformatics</source><year>2007</year><volume>8</volume><fpage>355</fpage><pub-id pub-id-type="pmid">17883866</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-8-355</pub-id></citation></ref></ref-list></back></article>